{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/plane.ico","path":"assets/plane.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/qq_qrcode.png","path":"assets/qq_qrcode.png","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka02.png","path":"avatar/Misaka02.png","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka03.png","path":"avatar/Misaka03.png","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/bluered.png","path":"avatar/bluered.png","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.png","path":"intro/post-bg.png","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"4048a736fdab42be2786375850e7ee3db652cb8a","modified":1632461218283},{"_id":"source/_posts/cocos2dx.md","hash":"acc297aaddda83125bb54dc86b939f09dbe7ecea","modified":1632456766573},{"_id":"source/_posts/debuggable.md","hash":"a981c14adac808baccd6fbbad1ecd743b4e7a16a","modified":1632456756678},{"_id":"source/_posts/ditherfade.md","hash":"1b1f94b34a667b9fc0030e0be4d2fc3858b6c9b1","modified":1632456638426},{"_id":"source/_posts/hello.md","hash":"1413d1c0fd5f46920ac1f07aa850fa84c42ca7f0","modified":1632456404370},{"_id":"source/_posts/python_import.md","hash":"7057a65f8cdf022887467966334dc97a9d22aeab","modified":1632456666474},{"_id":"source/_posts/test.md","hash":"415c1f3cd7984f00b58531ac65ee1da20f8bdc89","modified":1632468768963},{"_id":"source/about/index.md","hash":"443761c11ebfbd4b84a42a6ea0740f0f3d18a9fc","modified":1632462179526},{"_id":"source/_posts/ditherfade/dither_example_0.png","hash":"c59455f15c0ce7acaea05dee99681a02e33835a1","modified":1611910619332},{"_id":"source/_posts/ditherfade/dither_example_1.png","hash":"6b546e3cb9c1f480cd2a80068bf30bb296dcde60","modified":1611910619332},{"_id":"source/_posts/ditherfade/dither_example_2.png","hash":"b3d8010c38eab758b951439eec26a7116b62e975","modified":1611910619332},{"_id":"source/_posts/ditherfade/dither_example_3.png","hash":"8e80cb72c2e5f32c261b116dc2be6249a2d4e704","modified":1611910619333},{"_id":"source/_posts/ditherfade/dither_example_4.png","hash":"984645c5ad79eee3a32e4d0922694ef31363ddc7","modified":1611910619333},{"_id":"source/_posts/ditherfade/dither_example_5.png","hash":"31baf7b5d30324c75306b7049b4986b910763cbe","modified":1611910619333},{"_id":"source/_posts/ditherfade/equation_0.png","hash":"675f14d87afaf38968d9b3d4db150b3008c6ad15","modified":1611910619335},{"_id":"source/_posts/ditherfade/equation_1.png","hash":"bb2ded09f66b737dc6d462a76c41b75992bf61bf","modified":1611910619336},{"_id":"source/_posts/ditherfade/dither_fade_result.png","hash":"b45f90b2228073e811fd34bce5f05443cffc1dbb","modified":1611910619335},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611910619343},{"_id":"themes/archer/.DS_Store","hash":"217cbd428751810b31d9c0262d907422d7bfdc3c","modified":1632463613316},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1611910619336},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1611910619336},{"_id":"themes/archer/.gitignore","hash":"3c75d7681ccc4edd053107bee5a8c58607fb036d","modified":1611910619337},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1611910619337},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1611910619337},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1611910619337},{"_id":"themes/archer/README.md","hash":"a3ba929435da6adbed7b03657f84b69ab37cfe33","modified":1611910619338},{"_id":"themes/archer/_config.yml","hash":"7ac7a0d8dc3ff8689824834054ce76142063b916","modified":1632465838814},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1611910619341},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1611910619347},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1611910619377},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1611910619377},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1611910619338},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1611910619338},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1611910619339},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1611910619339},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1611910619341},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1611910619342},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1611910619342},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1611910619345},{"_id":"themes/archer/layout/index.ejs","hash":"3194a741fdc93f93a299222d9cda9b99088639bc","modified":1611910619346},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1611910619346},{"_id":"themes/archer/layout/post.ejs","hash":"9f886450a99eae3a8e1af78560ec6e72cefc36ca","modified":1611910619346},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1611910619346},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1611910619337},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1611910619337},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1611910619337},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1611910619342},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"793e2416f1a3353f478b12b367781f0109939adf","modified":1632466697703},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1611910619342},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"5e6276242a8bd3f76b35d93393c95e58b7884840","modified":1611910619342},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1611910619343},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1611910619343},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1611910619343},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1611910619343},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1611910619343},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1611910619344},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1611910619347},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1611910619348},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1611910619348},{"_id":"themes/archer/source/assets/plane.ico","hash":"11f707a227a9d56f19cdbbce553dc3d017abbda1","modified":1611910619348},{"_id":"themes/archer/source/assets/qq_qrcode.png","hash":"72ce00a2f6d92e379f70cd6f4f275dbd4760f973","modified":1632457867804},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1611910619349},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1611910619351},{"_id":"themes/archer/source/css/style.css","hash":"8e41748502e35784a242c3f11d758fece302f77c","modified":1611910619351},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1611910619353},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1611910619353},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1611910619366},{"_id":"themes/archer/source/scripts/search.js","hash":"127c388b575c2cb0a850b32c08dd61d6a6f690ba","modified":1611910619368},{"_id":"themes/archer/source/scripts/share.js","hash":"419c5e6e202fc899411d36e24cf453b48af8aef7","modified":1611910619368},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1611910619373},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1611910619373},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1611910619373},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1611910619377},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1611910619377},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1611910619377},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1611910619369},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1611910619369},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1611910619369},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1611910619369},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1611910619369},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1611910619370},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1611910619370},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1611910619371},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1611910619371},{"_id":"themes/archer/src/js/sidebar.js","hash":"0900c4a368687f882ba0559419b23357c534c403","modified":1611910619371},{"_id":"themes/archer/src/js/tag.js","hash":"4916f913c28943f857a0fcfdd191e24628f9193b","modified":1611910619372},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1611910619372},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1611910619373},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1611910619343},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1611910619343},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"809196ba5e91d4ba00477dd3e9768bd384dc9c9a","modified":1611910619344},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"031401489f3487b13fafcb17eea7c877f2f3b98f","modified":1611910619344},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1611910619344},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"cc41ba5da413cf39b809e7defb360b0d8fafc6f3","modified":1611910619344},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1611910619344},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1611910619344},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1611910619344},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1611910619345},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1611910619345},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1611910619345},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1611910619345},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1611910619345},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1611910619374},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1611910619374},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1611910619374},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1611910619375},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1611910619374},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"412b17cfac52e12751d248a704e5eb139e937bc4","modified":1611910619374},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1611910619375},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1611910619375},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1611910619375},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1611910619375},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1611910619376},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1611910619376},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"93cc82cb56663e83e90fbd6fe31ffdd38e694f3b","modified":1611910619376},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1611910619376},{"_id":"themes/archer/source/avatar/Misaka02.png","hash":"32585cf5532cf2e2616ff20b8fd46723a84be64b","modified":1611910619350},{"_id":"themes/archer/source/avatar/Misaka03.png","hash":"a457bbba80b6e4ab431b9dbb065537256408d10c","modified":1611910619351},{"_id":"themes/archer/source/avatar/bluered.png","hash":"f6633e1d067e54c6f44ec066841ce191340cce94","modified":1632384711552},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1611910619352},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1611910619354},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1611910619355},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1611910619356},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1611910619366},{"_id":"themes/archer/source/scripts/main.js","hash":"2cfe993eb1579e8aebf73b00d699b25be07981fa","modified":1611910619367},{"_id":"themes/archer/source/intro/post-bg.png","hash":"d5bfb7cd79c5232fb68aa6683b71cec6a9e32465","modified":1632384935209},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1611910619359},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1611910619365},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1611910619346},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1611910619341},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"b52b8d50657c33159745993a12dba697f5f9168f","modified":1632383952848}],"Category":[{"name":"cocos","_id":"ckty1tq640004lmfy6qp6gm4o"},{"name":"shader","_id":"ckty1tq680008lmfygmyk6h1y"}],"Data":[],"Page":[{"layout":"404","title":"啊? 这里什么都没有.","description":"[code=404]: 找不到页面","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: 啊? 这里什么都没有.\ndescription: \"[code=404]: 找不到页面\"\n---\n","date":"2021-09-24T05:26:58.283Z","updated":"2021-09-24T05:26:58.283Z","path":"404.html","comments":1,"_id":"ckty1tq5w0000lmfy9wx110qv","content":"\n","site":{"data":{}},"excerpt":"","more":"\n"},{"title":"博客简介","layout":"about","mathjax":false,"date":"2021-09-24T04:54:11.000Z","_content":"见识了 Fabrice Bellard 的无样式[个人网站](https://bellard.org/), 大为震撼.\n我觉得写点儿什么激励下自己应该是个好事情, 但不应该花费太多精力在排版之类的琐事上, 除非是写给别人看的教程.\n于是我也打算给自己搞一个写字儿的地方.\n\n我本意希望博客逻辑上越简单越好, 一个markdown渲染器, 可以自定义语法支持勾选框, 公式, 折叠之类的扩展就可以.\n而且我希望这个渲染器可以支撑一个编辑页面, 有些像是[这个页面](https://marked.js.org/demo/).\n\n后来发现事情并没有那么简单, 我需要自己搞定服务器数据库前后端等一大堆东西.\n再想到维护起来有多么麻烦, 和一开始不投入过多精力的目标背道而驰了.\n\n我之前感觉hexo部署的方法不是很直观, 需要通过反复调整文章内容才能排版出自己想要的样子.\n但仔细想过之后发现没啥区别, 而且这玩意儿有各种支持markdown扩展的姿势, 维护起来还不费劲.\n\n恰逢前段时间同事的云服务器忘了续费, 被回收了. 悲催的是这哥们儿没给自己的博客备份, 连git都没建.\n我想了想, 干脆把hexo生成的页面部署到github pages上, 需要的域名解析过去就完事儿了, 不费劲.\n硬说哪里不对劲, 这种静态的部署方式路由要结合nginx一起用, 不然就会像现在一样不会重定向404页面.\n\n于是整理了下个人资料, 随便在这里写点儿什么.\n平时更新看心情, 有时工作忙会很久不更新. 我会尽量把自己学到的东西, 以及见识到的玩意儿都拿出来分享下.\n","source":"about/index.md","raw":"---\ntitle: 博客简介\nlayout: about\nmathjax: false\ndate: 2021-09-24 12:54:11\n---\n见识了 Fabrice Bellard 的无样式[个人网站](https://bellard.org/), 大为震撼.\n我觉得写点儿什么激励下自己应该是个好事情, 但不应该花费太多精力在排版之类的琐事上, 除非是写给别人看的教程.\n于是我也打算给自己搞一个写字儿的地方.\n\n我本意希望博客逻辑上越简单越好, 一个markdown渲染器, 可以自定义语法支持勾选框, 公式, 折叠之类的扩展就可以.\n而且我希望这个渲染器可以支撑一个编辑页面, 有些像是[这个页面](https://marked.js.org/demo/).\n\n后来发现事情并没有那么简单, 我需要自己搞定服务器数据库前后端等一大堆东西.\n再想到维护起来有多么麻烦, 和一开始不投入过多精力的目标背道而驰了.\n\n我之前感觉hexo部署的方法不是很直观, 需要通过反复调整文章内容才能排版出自己想要的样子.\n但仔细想过之后发现没啥区别, 而且这玩意儿有各种支持markdown扩展的姿势, 维护起来还不费劲.\n\n恰逢前段时间同事的云服务器忘了续费, 被回收了. 悲催的是这哥们儿没给自己的博客备份, 连git都没建.\n我想了想, 干脆把hexo生成的页面部署到github pages上, 需要的域名解析过去就完事儿了, 不费劲.\n硬说哪里不对劲, 这种静态的部署方式路由要结合nginx一起用, 不然就会像现在一样不会重定向404页面.\n\n于是整理了下个人资料, 随便在这里写点儿什么.\n平时更新看心情, 有时工作忙会很久不更新. 我会尽量把自己学到的东西, 以及见识到的玩意儿都拿出来分享下.\n","updated":"2021-09-24T05:42:59.526Z","path":"about/index.html","comments":1,"_id":"ckty1tq620002lmfydgbf8unp","content":"<p>见识了 Fabrice Bellard 的无样式<a href=\"https://bellard.org/\">个人网站</a>, 大为震撼. 我觉得写点儿什么激励下自己应该是个好事情, 但不应该花费太多精力在排版之类的琐事上, 除非是写给别人看的教程. 于是我也打算给自己搞一个写字儿的地方.</p>\n<p>我本意希望博客逻辑上越简单越好, 一个markdown渲染器, 可以自定义语法支持勾选框, 公式, 折叠之类的扩展就可以. 而且我希望这个渲染器可以支撑一个编辑页面, 有些像是<a href=\"https://marked.js.org/demo/\">这个页面</a>.</p>\n<p>后来发现事情并没有那么简单, 我需要自己搞定服务器数据库前后端等一大堆东西. 再想到维护起来有多么麻烦, 和一开始不投入过多精力的目标背道而驰了.</p>\n<p>我之前感觉hexo部署的方法不是很直观, 需要通过反复调整文章内容才能排版出自己想要的样子. 但仔细想过之后发现没啥区别, 而且这玩意儿有各种支持markdown扩展的姿势, 维护起来还不费劲.</p>\n<p>恰逢前段时间同事的云服务器忘了续费, 被回收了. 悲催的是这哥们儿没给自己的博客备份, 连git都没建. 我想了想, 干脆把hexo生成的页面部署到github pages上, 需要的域名解析过去就完事儿了, 不费劲. 硬说哪里不对劲, 这种静态的部署方式路由要结合nginx一起用, 不然就会像现在一样不会重定向404页面.</p>\n<p>于是整理了下个人资料, 随便在这里写点儿什么. 平时更新看心情, 有时工作忙会很久不更新. 我会尽量把自己学到的东西, 以及见识到的玩意儿都拿出来分享下.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>见识了 Fabrice Bellard 的无样式<a href=\"https://bellard.org/\">个人网站</a>, 大为震撼. 我觉得写点儿什么激励下自己应该是个好事情, 但不应该花费太多精力在排版之类的琐事上, 除非是写给别人看的教程. 于是我也打算给自己搞一个写字儿的地方.</p>\n<p>我本意希望博客逻辑上越简单越好, 一个markdown渲染器, 可以自定义语法支持勾选框, 公式, 折叠之类的扩展就可以. 而且我希望这个渲染器可以支撑一个编辑页面, 有些像是<a href=\"https://marked.js.org/demo/\">这个页面</a>.</p>\n<p>后来发现事情并没有那么简单, 我需要自己搞定服务器数据库前后端等一大堆东西. 再想到维护起来有多么麻烦, 和一开始不投入过多精力的目标背道而驰了.</p>\n<p>我之前感觉hexo部署的方法不是很直观, 需要通过反复调整文章内容才能排版出自己想要的样子. 但仔细想过之后发现没啥区别, 而且这玩意儿有各种支持markdown扩展的姿势, 维护起来还不费劲.</p>\n<p>恰逢前段时间同事的云服务器忘了续费, 被回收了. 悲催的是这哥们儿没给自己的博客备份, 连git都没建. 我想了想, 干脆把hexo生成的页面部署到github pages上, 需要的域名解析过去就完事儿了, 不费劲. 硬说哪里不对劲, 这种静态的部署方式路由要结合nginx一起用, 不然就会像现在一样不会重定向404页面.</p>\n<p>于是整理了下个人资料, 随便在这里写点儿什么. 平时更新看心情, 有时工作忙会很久不更新. 我会尽量把自己学到的东西, 以及见识到的玩意儿都拿出来分享下.</p>\n"}],"Post":[{"title":"Cocos2d-x 4.x 项目工程构建","date":"2020-11-27T12:43:11.000Z","_content":"\nCocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.\n\n首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.\n\n----\n\n### <font color=red>20201127更新:</font>\n\n实际上[官方教程](https://docs.cocos.com/cocos2d-x/manual/zh/installation/)有留方法, 就是用创建工程的那个脚本, 使用方法:\n\n```shell\nmkdir build\ncd build\ncocos run --proj-dir .. -p [mac|win32|android|linux|ios]\n```\n\n其实就是直接跑cocos run, 指定下项目路径, 指定下platform. 注意-p的值不可以是windows.\n\n此外不论如何挣扎, 添加新的代码文件或者资源文件之后都需要重新运行一下, 这很蛋疼.\n\n----\n\n# Windows上构建Visual Studio项目\n\n先创建个目录用来装项目工程(powershell)\n\n```shell\nmkdir win32-build && cd win32-build;\n```\n\n然后用cmake进行构建\n\n```shell\ncmake .. -G \"Visual Studio 16 2019\" -Tv141 -A win32\n```\n\n上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)\n\n```shell\n-G \"Visual Studio 9 2008\"\n-G \"Visual Studio 10 2010\"\n-G \"Visual Studio 11 2012\"\n-G \"Visual Studio 12 2013\"\n-G \"Visual Studio 14 2015\"\n-G \"Visual Studio 15 2017\"\n-G \"Visual Studio 16 2019\"\n```\n\n然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如\n\n```shell\n-A Win32\n-A x64\n-A ARM\n-A ARM64\n```\n\n运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:\n\n```log\n14>已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.\n```\n\n往上看找到具体报错, 发现是个python脚本运行失败了.\n\n```log\n14>sync_folder.py: error: argument -l: expected one argument\n```\n\n这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考[这篇帖子](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952), 其中指出:\n\n> 这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。\n\n原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", default=None)\n```\n\n将其修改为:\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", nargs=\"?\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", nargs=\"?\", default=None)\n```\n\n再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).\n\n----\n\n# Mac上构建Xcode项目\n\n同样的, 首先找个地方创建项目工程\n\n```shell\nmkdir ios_mac-build && cd ios_mac-build;\ncmake .. -G \"Xcode\"\n```\n\n不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:\n\n```log\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_C_COMPILER could be found.\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_CXX_COMPILER could be found.\n-- Configuring incomplete, errors occurred!\n```\n\n首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:\n\n```shell\nsudo xcode-select --reset\nsudo xcode-select --switch /Applications/Xcode.app\n```\n\n但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:\n\n```shell\nbrew upgrade cmake\n```\n\n完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.\n\n### 参考\n\n[关于cocos2dx 4.0 cmake编译的一些坑](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952)\n\n[Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)](https://blog.csdn.net/hunter_wyh/article/details/104377872)\n\n","source":"_posts/cocos2dx.md","raw":"---\ntitle: Cocos2d-x 4.x 项目工程构建\ndate: 2020-11-27 20:43:11\ncategories: cocos\n---\n\nCocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.\n\n首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.\n\n----\n\n### <font color=red>20201127更新:</font>\n\n实际上[官方教程](https://docs.cocos.com/cocos2d-x/manual/zh/installation/)有留方法, 就是用创建工程的那个脚本, 使用方法:\n\n```shell\nmkdir build\ncd build\ncocos run --proj-dir .. -p [mac|win32|android|linux|ios]\n```\n\n其实就是直接跑cocos run, 指定下项目路径, 指定下platform. 注意-p的值不可以是windows.\n\n此外不论如何挣扎, 添加新的代码文件或者资源文件之后都需要重新运行一下, 这很蛋疼.\n\n----\n\n# Windows上构建Visual Studio项目\n\n先创建个目录用来装项目工程(powershell)\n\n```shell\nmkdir win32-build && cd win32-build;\n```\n\n然后用cmake进行构建\n\n```shell\ncmake .. -G \"Visual Studio 16 2019\" -Tv141 -A win32\n```\n\n上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)\n\n```shell\n-G \"Visual Studio 9 2008\"\n-G \"Visual Studio 10 2010\"\n-G \"Visual Studio 11 2012\"\n-G \"Visual Studio 12 2013\"\n-G \"Visual Studio 14 2015\"\n-G \"Visual Studio 15 2017\"\n-G \"Visual Studio 16 2019\"\n```\n\n然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如\n\n```shell\n-A Win32\n-A x64\n-A ARM\n-A ARM64\n```\n\n运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:\n\n```log\n14>已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.\n```\n\n往上看找到具体报错, 发现是个python脚本运行失败了.\n\n```log\n14>sync_folder.py: error: argument -l: expected one argument\n```\n\n这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考[这篇帖子](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952), 其中指出:\n\n> 这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。\n\n原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", default=None)\n```\n\n将其修改为:\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", nargs=\"?\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", nargs=\"?\", default=None)\n```\n\n再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).\n\n----\n\n# Mac上构建Xcode项目\n\n同样的, 首先找个地方创建项目工程\n\n```shell\nmkdir ios_mac-build && cd ios_mac-build;\ncmake .. -G \"Xcode\"\n```\n\n不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:\n\n```log\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_C_COMPILER could be found.\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_CXX_COMPILER could be found.\n-- Configuring incomplete, errors occurred!\n```\n\n首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:\n\n```shell\nsudo xcode-select --reset\nsudo xcode-select --switch /Applications/Xcode.app\n```\n\n但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:\n\n```shell\nbrew upgrade cmake\n```\n\n完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.\n\n### 参考\n\n[关于cocos2dx 4.0 cmake编译的一些坑](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952)\n\n[Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)](https://blog.csdn.net/hunter_wyh/article/details/104377872)\n\n","slug":"cocos2dx","published":1,"updated":"2021-09-24T04:12:46.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq5y0001lmfyb1uvdli4","content":"<p>Cocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.</p>\n<p>首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.</p>\n<hr>\n<h3 id=\"更新\"><font color=\"red\">20201127更新:</font></h3>\n<p>实际上<a href=\"https://docs.cocos.com/cocos2d-x/manual/zh/installation/\">官方教程</a>有留方法, 就是用创建工程的那个脚本, 使用方法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cocos run --proj-dir .. -p [mac|win32|android|linux|ios]</span><br></pre></td></tr></table></figure>\n<p>其实就是直接跑cocos run, 指定下项目路径, 指定下platform. 注意-p的值不可以是windows.</p>\n<p>此外不论如何挣扎, 添加新的代码文件或者资源文件之后都需要重新运行一下, 这很蛋疼.</p>\n<hr>\n<h1 id=\"windows上构建visual-studio项目\">Windows上构建Visual Studio项目</h1>\n<p>先创建个目录用来装项目工程(powershell)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir win32-build &amp;&amp; cd win32-build;</span><br></pre></td></tr></table></figure>\n<p>然后用cmake进行构建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .. -G &quot;Visual Studio 16 2019&quot; -Tv141 -A win32</span><br></pre></td></tr></table></figure>\n<p>上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-G &quot;Visual Studio 9 2008&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 10 2010&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 11 2012&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 12 2013&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 14 2015&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 15 2017&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 16 2019&quot;</span><br></pre></td></tr></table></figure>\n<p>然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A Win32</span><br><span class=\"line\">-A x64</span><br><span class=\"line\">-A ARM</span><br><span class=\"line\">-A ARM64</span><br></pre></td></tr></table></figure>\n<p>运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.</span><br></pre></td></tr></table></figure>\n<p>往上看找到具体报错, 发现是个python脚本运行失败了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;sync_folder.py: error: argument -l: expected one argument</span><br></pre></td></tr></table></figure>\n<p>这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考<a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">这篇帖子</a>, 其中指出:</p>\n<blockquote>\n<p>这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。</p>\n</blockquote>\n<p>原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>将其修改为:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).</p>\n<hr>\n<h1 id=\"mac上构建xcode项目\">Mac上构建Xcode项目</h1>\n<p>同样的, 首先找个地方创建项目工程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ios_mac-build &amp;&amp; cd ios_mac-build;</span><br><span class=\"line\">cmake .. -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_C_COMPILER could be found.</span><br><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_CXX_COMPILER could be found.</span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n<p>首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select --reset</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>\n<p>但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade cmake</span><br></pre></td></tr></table></figure>\n<p>完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.</p>\n<h3 id=\"参考\">参考</h3>\n<p><a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">关于cocos2dx 4.0 cmake编译的一些坑</a></p>\n<p><a href=\"https://blog.csdn.net/hunter_wyh/article/details/104377872\">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.</p>\n<p>首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.</p>\n<hr>\n<h3 id=\"更新\"><font color=\"red\">20201127更新:</font></h3>\n<p>实际上<a href=\"https://docs.cocos.com/cocos2d-x/manual/zh/installation/\">官方教程</a>有留方法, 就是用创建工程的那个脚本, 使用方法:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cocos run --proj-dir .. -p [mac|win32|android|linux|ios]</span><br></pre></td></tr></table></figure>\n<p>其实就是直接跑cocos run, 指定下项目路径, 指定下platform. 注意-p的值不可以是windows.</p>\n<p>此外不论如何挣扎, 添加新的代码文件或者资源文件之后都需要重新运行一下, 这很蛋疼.</p>\n<hr>\n<h1 id=\"windows上构建visual-studio项目\">Windows上构建Visual Studio项目</h1>\n<p>先创建个目录用来装项目工程(powershell)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir win32-build &amp;&amp; cd win32-build;</span><br></pre></td></tr></table></figure>\n<p>然后用cmake进行构建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .. -G &quot;Visual Studio 16 2019&quot; -Tv141 -A win32</span><br></pre></td></tr></table></figure>\n<p>上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-G &quot;Visual Studio 9 2008&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 10 2010&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 11 2012&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 12 2013&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 14 2015&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 15 2017&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 16 2019&quot;</span><br></pre></td></tr></table></figure>\n<p>然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A Win32</span><br><span class=\"line\">-A x64</span><br><span class=\"line\">-A ARM</span><br><span class=\"line\">-A ARM64</span><br></pre></td></tr></table></figure>\n<p>运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.</span><br></pre></td></tr></table></figure>\n<p>往上看找到具体报错, 发现是个python脚本运行失败了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;sync_folder.py: error: argument -l: expected one argument</span><br></pre></td></tr></table></figure>\n<p>这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考<a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">这篇帖子</a>, 其中指出:</p>\n<blockquote>\n<p>这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。</p>\n</blockquote>\n<p>原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>将其修改为:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).</p>\n<hr>\n<h1 id=\"mac上构建xcode项目\">Mac上构建Xcode项目</h1>\n<p>同样的, 首先找个地方创建项目工程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ios_mac-build &amp;&amp; cd ios_mac-build;</span><br><span class=\"line\">cmake .. -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n<p>不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_C_COMPILER could be found.</span><br><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_CXX_COMPILER could be found.</span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n<p>首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select --reset</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>\n<p>但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade cmake</span><br></pre></td></tr></table></figure>\n<p>完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.</p>\n<h3 id=\"参考\">参考</h3>\n<p><a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">关于cocos2dx 4.0 cmake编译的一些坑</a></p>\n<p><a href=\"https://blog.csdn.net/hunter_wyh/article/details/104377872\">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)</a></p>\n"},{"title":"apk修改debuggable","date":"2020-11-26T10:08:12.000Z","_content":"\n最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:\n\n* 可以通过反编译再回编译的方式修改AndroidManifest.xml\n\n* 或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml\n\n* 再或者直接上Magisk, 开启全局可调式.\n\n第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个[参考链接](https://blog.csdn.net/yhsnihao/article/details/106760666), 暂且搁置. 这里在Mac上尝试下前两个方法.\n\n<font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font>\n\n----\n\n# 反编译+回编译\n\n**注意**: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.\n\n### 1. 装个apktool先\n\n[下载地址](https://ibotpeaches.github.io/Apktool/install/)内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.\n\n### 2. 拆开\n\n```shell\napktool d com.hello.apk\n```\n\n成功后会在当前目录下生成一个和包同名的目录.\n\n### 3. 修改AndroidManifest.xml\n\n找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.\n\n```xml\n<applicaion android:debuggable=\"true\">\n```\n\n### 4. 打包\n\n```shell\napktool b com.hello.apk/\n```\n\n成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.\n\n### 5. 生成一个keystore\n\n如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).\n\n```shell\nkeytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore\n```\n\n过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.\n\n### 6. 重新签名\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore\n```\n\n过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:\n\n```log\n>>> 签名者\n    X.509, CN=..., OU=..., O=..., L=..., ST=..., C=...\n    [可信证书]\n\njar 已签名。\n\n警告:\n签名者证书为自签名证书。\n```\n\n至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.\n\n----\n\n# 使用AXMLEditor修改AndroidManifest\n\n<font color=red>如果反编译+回编译可以搞定问题是最好的, 不行的话再试下面这个方法, 因为个人感觉可能有坑, 文章末尾会说为什么. </font>\n\n而某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.\n\n### 1. 装个AXMLEditor先\n\n```shell\ngit clone git@github.com:fourbrother/AXMLEditor.git\n```\n\n啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.\n\n### 2. 解压 & 修改\n\n首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了\n\n```shell\nunzip -n -d com.hello com.hello.apk\n```\n\n可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.\n\n```shell\njava -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml\n```\n\n这里顺带提一下, 看工具源码中[这个位置](https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151)对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.\n\n最后用输出的文件覆盖原本的输入文件:\n\n```shell\nmv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml\n```\n\n### 3. 压缩 & 二次签名\n\n这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.\n\n**重要**: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.\n\n这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:\n\n```shell\ncd com.hello/\nrm -rf META-INF\nzip -r ../com.hello_new.apk ./\ncd ..\n```\n\n然后是同样的签名过程, 创建keystore请去上面的内容找:\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore\n```\n\n到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.\n\n<font color=\"#EEE\">撒, 开始快乐的截帧吧. </font>\n\n----\n\n### 坑?\n\n咱尝试了两种方法, 发现后者输出的apk并不能正常debug, 于是用aapt查看包体的各项属性, 发现:\n\n```log\n> ./aapt list -v -a result_OK.apk | grep debuggable\n    A: android:debuggable(0x0101000f)=(type 0x12)0xffffffff\n> ./aapt list -v -a result_GG.apk | grep debuggable\n    A: android:debuggable=(type 0x12)0x1 (Raw: \"true\")\n```\n\nemmmm, 用力过猛塞进去一个raw string? 具体原理探究起来可能时间开销比较大, 于是我就放弃了, 还好有一个方法可以用.\n害, 当然也可能是我使用方法出错了, 常有的事儿, 如果有知情的朋友欢迎批评, 感谢指教!\n\n---\n\n### 参考&感谢\n\n[【Android测试工具】03. ApkTool在Mac上的安装和使用](https://blog.csdn.net/wirelessqa/article/details/8997168)\n\n[关于keystore的简单介绍](https://blog.csdn.net/zlh313_01/article/details/82424664)\n\n[Android 8.0 以上开启全局可调式](https://blog.csdn.net/yhsnihao/article/details/106760666)\n\n[Android中利用AXMLEditor工具不进行反编译就篡改apk文件](http://www.wjdiankong.cn/archives/1036)\n","source":"_posts/debuggable.md","raw":"---\ntitle: apk修改debuggable\ndate: 2020-11-26 18:08:12\n---\n\n最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:\n\n* 可以通过反编译再回编译的方式修改AndroidManifest.xml\n\n* 或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml\n\n* 再或者直接上Magisk, 开启全局可调式.\n\n第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个[参考链接](https://blog.csdn.net/yhsnihao/article/details/106760666), 暂且搁置. 这里在Mac上尝试下前两个方法.\n\n<font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font>\n\n----\n\n# 反编译+回编译\n\n**注意**: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.\n\n### 1. 装个apktool先\n\n[下载地址](https://ibotpeaches.github.io/Apktool/install/)内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.\n\n### 2. 拆开\n\n```shell\napktool d com.hello.apk\n```\n\n成功后会在当前目录下生成一个和包同名的目录.\n\n### 3. 修改AndroidManifest.xml\n\n找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.\n\n```xml\n<applicaion android:debuggable=\"true\">\n```\n\n### 4. 打包\n\n```shell\napktool b com.hello.apk/\n```\n\n成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.\n\n### 5. 生成一个keystore\n\n如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).\n\n```shell\nkeytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore\n```\n\n过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.\n\n### 6. 重新签名\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore\n```\n\n过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:\n\n```log\n>>> 签名者\n    X.509, CN=..., OU=..., O=..., L=..., ST=..., C=...\n    [可信证书]\n\njar 已签名。\n\n警告:\n签名者证书为自签名证书。\n```\n\n至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.\n\n----\n\n# 使用AXMLEditor修改AndroidManifest\n\n<font color=red>如果反编译+回编译可以搞定问题是最好的, 不行的话再试下面这个方法, 因为个人感觉可能有坑, 文章末尾会说为什么. </font>\n\n而某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.\n\n### 1. 装个AXMLEditor先\n\n```shell\ngit clone git@github.com:fourbrother/AXMLEditor.git\n```\n\n啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.\n\n### 2. 解压 & 修改\n\n首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了\n\n```shell\nunzip -n -d com.hello com.hello.apk\n```\n\n可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.\n\n```shell\njava -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml\n```\n\n这里顺带提一下, 看工具源码中[这个位置](https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151)对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.\n\n最后用输出的文件覆盖原本的输入文件:\n\n```shell\nmv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml\n```\n\n### 3. 压缩 & 二次签名\n\n这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.\n\n**重要**: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.\n\n这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:\n\n```shell\ncd com.hello/\nrm -rf META-INF\nzip -r ../com.hello_new.apk ./\ncd ..\n```\n\n然后是同样的签名过程, 创建keystore请去上面的内容找:\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore\n```\n\n到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.\n\n<font color=\"#EEE\">撒, 开始快乐的截帧吧. </font>\n\n----\n\n### 坑?\n\n咱尝试了两种方法, 发现后者输出的apk并不能正常debug, 于是用aapt查看包体的各项属性, 发现:\n\n```log\n> ./aapt list -v -a result_OK.apk | grep debuggable\n    A: android:debuggable(0x0101000f)=(type 0x12)0xffffffff\n> ./aapt list -v -a result_GG.apk | grep debuggable\n    A: android:debuggable=(type 0x12)0x1 (Raw: \"true\")\n```\n\nemmmm, 用力过猛塞进去一个raw string? 具体原理探究起来可能时间开销比较大, 于是我就放弃了, 还好有一个方法可以用.\n害, 当然也可能是我使用方法出错了, 常有的事儿, 如果有知情的朋友欢迎批评, 感谢指教!\n\n---\n\n### 参考&感谢\n\n[【Android测试工具】03. ApkTool在Mac上的安装和使用](https://blog.csdn.net/wirelessqa/article/details/8997168)\n\n[关于keystore的简单介绍](https://blog.csdn.net/zlh313_01/article/details/82424664)\n\n[Android 8.0 以上开启全局可调式](https://blog.csdn.net/yhsnihao/article/details/106760666)\n\n[Android中利用AXMLEditor工具不进行反编译就篡改apk文件](http://www.wjdiankong.cn/archives/1036)\n","slug":"debuggable","published":1,"updated":"2021-09-24T04:12:36.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq620003lmfy81r41o14","content":"<p>最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:</p>\n<ul>\n<li><p>可以通过反编译再回编译的方式修改AndroidManifest.xml</p></li>\n<li><p>或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml</p></li>\n<li><p>再或者直接上Magisk, 开启全局可调式.</p></li>\n</ul>\n<p>第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个<a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">参考链接</a>, 暂且搁置. 这里在Mac上尝试下前两个方法.</p>\n<p><font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font></p>\n<hr>\n<h1 id=\"反编译回编译\">反编译+回编译</h1>\n<p><strong>注意</strong>: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.</p>\n<h3 id=\"装个apktool先\">1. 装个apktool先</h3>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/install/\">下载地址</a>内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.</p>\n<h3 id=\"拆开\">2. 拆开</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d com.hello.apk</span><br></pre></td></tr></table></figure>\n<p>成功后会在当前目录下生成一个和包同名的目录.</p>\n<h3 id=\"修改androidmanifest.xml\">3. 修改AndroidManifest.xml</h3>\n<p>找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">applicaion</span> <span class=\"attr\">android:debuggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\">4. 打包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b com.hello.apk/</span><br></pre></td></tr></table></figure>\n<p>成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.</p>\n<h3 id=\"生成一个keystore\">5. 生成一个keystore</h3>\n<p>如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore</span><br></pre></td></tr></table></figure>\n<p>过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.</p>\n<h3 id=\"重新签名\">6. 重新签名</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore</span><br></pre></td></tr></table></figure>\n<p>过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 签名者</span><br><span class=\"line\">    X.509, CN&#x3D;..., OU&#x3D;..., O&#x3D;..., L&#x3D;..., ST&#x3D;..., C&#x3D;...</span><br><span class=\"line\">    [可信证书]</span><br><span class=\"line\"></span><br><span class=\"line\">jar 已签名。</span><br><span class=\"line\"></span><br><span class=\"line\">警告:</span><br><span class=\"line\">签名者证书为自签名证书。</span><br></pre></td></tr></table></figure>\n<p>至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.</p>\n<hr>\n<h1 id=\"使用axmleditor修改androidmanifest\">使用AXMLEditor修改AndroidManifest</h1>\n<p><font color=\"red\">如果反编译+回编译可以搞定问题是最好的, 不行的话再试下面这个方法, 因为个人感觉可能有坑, 文章末尾会说为什么. </font></p>\n<p>而某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.</p>\n<h3 id=\"装个axmleditor先\">1. 装个AXMLEditor先</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fourbrother/AXMLEditor.git</span><br></pre></td></tr></table></figure>\n<p>啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.</p>\n<h3 id=\"解压-修改\">2. 解压 &amp; 修改</h3>\n<p>首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -n -d com.hello com.hello.apk</span><br></pre></td></tr></table></figure>\n<p>可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml</span><br></pre></td></tr></table></figure>\n<p>这里顺带提一下, 看工具源码中<a href=\"https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151\">这个位置</a>对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.</p>\n<p>最后用输出的文件覆盖原本的输入文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩-二次签名\">3. 压缩 &amp; 二次签名</h3>\n<p>这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.</p>\n<p><strong>重要</strong>: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.</p>\n<p>这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd com.hello/</span><br><span class=\"line\">rm -rf META-INF</span><br><span class=\"line\">zip -r ../com.hello_new.apk ./</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n<p>然后是同样的签名过程, 创建keystore请去上面的内容找:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore</span><br></pre></td></tr></table></figure>\n<p>到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.</p>\n<p><font color=\"#EEE\">撒, 开始快乐的截帧吧. </font></p>\n<hr>\n<h3 id=\"坑\">坑?</h3>\n<p>咱尝试了两种方法, 发现后者输出的apk并不能正常debug, 于是用aapt查看包体的各项属性, 发现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; .&#x2F;aapt list -v -a result_OK.apk | grep debuggable</span><br><span class=\"line\">    A: android:debuggable(0x0101000f)&#x3D;(type 0x12)0xffffffff</span><br><span class=\"line\">&gt; .&#x2F;aapt list -v -a result_GG.apk | grep debuggable</span><br><span class=\"line\">    A: android:debuggable&#x3D;(type 0x12)0x1 (Raw: &quot;true&quot;)</span><br></pre></td></tr></table></figure>\n<p>emmmm, 用力过猛塞进去一个raw string? 具体原理探究起来可能时间开销比较大, 于是我就放弃了, 还好有一个方法可以用. 害, 当然也可能是我使用方法出错了, 常有的事儿, 如果有知情的朋友欢迎批评, 感谢指教!</p>\n<hr>\n<h3 id=\"参考感谢\">参考&amp;感谢</h3>\n<p><a href=\"https://blog.csdn.net/wirelessqa/article/details/8997168\">【Android测试工具】03. ApkTool在Mac上的安装和使用</a></p>\n<p><a href=\"https://blog.csdn.net/zlh313_01/article/details/82424664\">关于keystore的简单介绍</a></p>\n<p><a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">Android 8.0 以上开启全局可调式</a></p>\n<p><a href=\"http://www.wjdiankong.cn/archives/1036\">Android中利用AXMLEditor工具不进行反编译就篡改apk文件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:</p>\n<ul>\n<li><p>可以通过反编译再回编译的方式修改AndroidManifest.xml</p></li>\n<li><p>或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml</p></li>\n<li><p>再或者直接上Magisk, 开启全局可调式.</p></li>\n</ul>\n<p>第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个<a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">参考链接</a>, 暂且搁置. 这里在Mac上尝试下前两个方法.</p>\n<p><font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font></p>\n<hr>\n<h1 id=\"反编译回编译\">反编译+回编译</h1>\n<p><strong>注意</strong>: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.</p>\n<h3 id=\"装个apktool先\">1. 装个apktool先</h3>\n<p><a href=\"https://ibotpeaches.github.io/Apktool/install/\">下载地址</a>内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.</p>\n<h3 id=\"拆开\">2. 拆开</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d com.hello.apk</span><br></pre></td></tr></table></figure>\n<p>成功后会在当前目录下生成一个和包同名的目录.</p>\n<h3 id=\"修改androidmanifest.xml\">3. 修改AndroidManifest.xml</h3>\n<p>找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">applicaion</span> <span class=\"attr\">android:debuggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\">4. 打包</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b com.hello.apk/</span><br></pre></td></tr></table></figure>\n<p>成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.</p>\n<h3 id=\"生成一个keystore\">5. 生成一个keystore</h3>\n<p>如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore</span><br></pre></td></tr></table></figure>\n<p>过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.</p>\n<h3 id=\"重新签名\">6. 重新签名</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore</span><br></pre></td></tr></table></figure>\n<p>过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 签名者</span><br><span class=\"line\">    X.509, CN&#x3D;..., OU&#x3D;..., O&#x3D;..., L&#x3D;..., ST&#x3D;..., C&#x3D;...</span><br><span class=\"line\">    [可信证书]</span><br><span class=\"line\"></span><br><span class=\"line\">jar 已签名。</span><br><span class=\"line\"></span><br><span class=\"line\">警告:</span><br><span class=\"line\">签名者证书为自签名证书。</span><br></pre></td></tr></table></figure>\n<p>至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.</p>\n<hr>\n<h1 id=\"使用axmleditor修改androidmanifest\">使用AXMLEditor修改AndroidManifest</h1>\n<p><font color=\"red\">如果反编译+回编译可以搞定问题是最好的, 不行的话再试下面这个方法, 因为个人感觉可能有坑, 文章末尾会说为什么. </font></p>\n<p>而某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.</p>\n<h3 id=\"装个axmleditor先\">1. 装个AXMLEditor先</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fourbrother/AXMLEditor.git</span><br></pre></td></tr></table></figure>\n<p>啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.</p>\n<h3 id=\"解压-修改\">2. 解压 &amp; 修改</h3>\n<p>首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -n -d com.hello com.hello.apk</span><br></pre></td></tr></table></figure>\n<p>可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml</span><br></pre></td></tr></table></figure>\n<p>这里顺带提一下, 看工具源码中<a href=\"https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151\">这个位置</a>对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.</p>\n<p>最后用输出的文件覆盖原本的输入文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"压缩-二次签名\">3. 压缩 &amp; 二次签名</h3>\n<p>这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.</p>\n<p><strong>重要</strong>: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.</p>\n<p>这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd com.hello/</span><br><span class=\"line\">rm -rf META-INF</span><br><span class=\"line\">zip -r ../com.hello_new.apk ./</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n<p>然后是同样的签名过程, 创建keystore请去上面的内容找:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore</span><br></pre></td></tr></table></figure>\n<p>到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.</p>\n<p><font color=\"#EEE\">撒, 开始快乐的截帧吧. </font></p>\n<hr>\n<h3 id=\"坑\">坑?</h3>\n<p>咱尝试了两种方法, 发现后者输出的apk并不能正常debug, 于是用aapt查看包体的各项属性, 发现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; .&#x2F;aapt list -v -a result_OK.apk | grep debuggable</span><br><span class=\"line\">    A: android:debuggable(0x0101000f)&#x3D;(type 0x12)0xffffffff</span><br><span class=\"line\">&gt; .&#x2F;aapt list -v -a result_GG.apk | grep debuggable</span><br><span class=\"line\">    A: android:debuggable&#x3D;(type 0x12)0x1 (Raw: &quot;true&quot;)</span><br></pre></td></tr></table></figure>\n<p>emmmm, 用力过猛塞进去一个raw string? 具体原理探究起来可能时间开销比较大, 于是我就放弃了, 还好有一个方法可以用. 害, 当然也可能是我使用方法出错了, 常有的事儿, 如果有知情的朋友欢迎批评, 感谢指教!</p>\n<hr>\n<h3 id=\"参考感谢\">参考&amp;感谢</h3>\n<p><a href=\"https://blog.csdn.net/wirelessqa/article/details/8997168\">【Android测试工具】03. ApkTool在Mac上的安装和使用</a></p>\n<p><a href=\"https://blog.csdn.net/zlh313_01/article/details/82424664\">关于keystore的简单介绍</a></p>\n<p><a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">Android 8.0 以上开启全局可调式</a></p>\n<p><a href=\"http://www.wjdiankong.cn/archives/1036\">Android中利用AXMLEditor工具不进行反编译就篡改apk文件</a></p>\n"},{"title":"Dither Fade效果学习","date":"2021-01-11T02:27:45.000Z","_content":"\n前几天看了Dithering相关的一些内容, 没有深入了解, 但是感觉值得记录一下.\n\n最初是因为在Unity的Amplify Shader Editor这个包 (很好的工具!) 的例子中看到了一个效果, 名字叫做Dithering Fade. 顺带一提这个效果以前被我误以为是screen-door透明, 其实不是, 透明的效果和这个还是差很多的. 抖出来的透明效果在性能上快得很, 而且随着像素密度的升高效果也很不错, 所以比较适合手机环境.\n\nAmplify Shader Editor中提供了两版实现, 一种是使用Bayer抖动表, 另一种则是使用Blue Noise Sampling做的.\n\n# 什么是Dithering?\n\n> 就好像哪怕我只有0度的水和100度的水，只要调整好比例，理论上我也能混合出0度到100度之间任何温度的水。[3]\n\n抖动(*dither*), 是指一种特意引入的噪声, 用于替代简单量化产生的误差. 不仅出现在图形处理中色彩表示精度不足的情况, 在音频处理中也常常用于构造一个平坦底噪来替代简单量化产生的谐波失真.\n\n**但是!** 抖动并不能解决图像中的失真现象, 它通过引入随机变量的方式来使变化更加平滑, 这样的效果是因为人的眼睛倾向于忽略随机噪声. 这就好比使用黑白二值表示灰度图像, 只需在更黑的地方增加黑点的数量, 在较亮的部位减少黑点的数量就可以. 这并没有改变图像中只有黑白二值的规定, 但是肉眼却能看出不同的颜色, 这个方法也被称为*图案法*[1].\n\n比方说现在有这样一张8位灰度图:\n\n![0到255渐变](dither_example_0.png)\n\n考虑一个极端情况, 将这张图的位深缩减为1位, 如果采用四舍五入的方式决定颜色就会发生失真, 变成下面这个样子:\n\n![0到1, 或许也可称之为渐变](dither_example_1.png)\n\n而实际上在左半侧图像内将1\\~127的值处理为0, 或是在右半侧图像中将128\\~254处理为255都是存在误差的, 因此要更好地表示出颜色连续的变化, 可以考虑将误差扩散到附近的点, 改变他们的值以使误差的分布更加均匀. 那么问题来了, 改变哪一个点的颜色呢? 如果随机地为点加一个颜色的偏差值, 看上去会是这个样子:\n\n![随机抖动的结果, 一定程度上还原出了原始图像](dither_example_2.png)\n\nok, 这个图已经有点那个意思了, 通过加入一个白噪声把简单量化的误差遮过去了, 但是可能最终图片和原始图片并不相像, 这一点通过取一个高斯模糊就能看出.\n\n![实际上与原始图像相比多了许多没有的特征, 比如偏白色的区域内有黑色聚集](dither_example_3.png)\n\n# 有序抖动与Bayer抖动表\n\n为了使变化看上去更加均匀, 我们可以使用一个固定的矩阵与图像中的内容做比较, 当图像亮度大于矩阵时画一个白点儿, 反之则画一个黑点儿, 这样便可以在考虑到误差的情况下较为均匀地表示一个范围内的变化与误差. 现在我们称这种方法为有序抖动(*ordered dithering*).\n\nLimb于1969年提出了一种标准图案设计的算法, 如下定义[1]:<font color=white>(我大意了啊! 居然不支持latex公式渲染! 这让我对以后的笔记十分担忧)</font>\n\n![公式定义](equation_0.png)\n\n特殊地, M3矩阵被称为Bayer有序抖动矩阵(*Bayer Ordered Dither Matrix*), 也成Bayer抖动表, 内容如下[2]:\n\n![Bayer抖动表](equation_1.png)\n\n在上面灰度图像转换为黑白二值图像的过程中使用该方法进行抖动, 将会得到这样一个结果:\n\n![Bayer抖动结果](dither_example_4.png)\n\n这效果眼熟至极, 早年间的各路游戏机屏幕上常常会出现这种充斥着叉叉和对角线的显示效果, 就是为了提高显示的效果.\n\n# Floyd-Steinberg算法\n\n但是上面给出的效果“并不好看”, 实际上在抖动的过程中由于矩阵内容的特殊性, 引入了许多原图像中并不存在的特征, 图案法产生的图案化非常明显, 而且并不能很好地显示颜色误差过低的情况. 另一个更好的方法是将误差传递到相邻的像素, 并且累积下来, Floyd-Steinberg算法采用的就是这个方法.\n\n设原图像颜色显示误差为e, 则分别将(3/8)e加到右方和下方的像素颜色上, 并将(1/4)e加到右下方像素的颜色上. 使用这种抖动方法绘制的图片像这样:\n\n![Floyd-Steinberg算法抖动结果](dither_example_5.png)\n\n这张图与上面的结果相比是看不出什么图案的, 也就是说, 它更加接近于原图像了.\n\n# 使用蓝噪声(*Blue Noise*)进行抖动\n\n学习过OpenGL的同学可能有所了解, 自带的GL_DITHER是默认开启的, 但当我们使用8位色去渲染物体时仍然会出现轻微的colour banding artifacts, 这是因为多数OpenGL版本中对于GL_DITHER只做了个空实现, 没有加入抖动效果[4]. 有时需要我们手动加入抖动效果, 那么问题就出现了, Bayer抖动表会引入图案化, 而Floyd-Steinberg算法的代价高, 因此可以传统艺能再现, 使用一个噪声来控制抖动.\n\n这个噪声需要一些良好的特性, 如果直接生成一个白噪声(*White Noise*), 你会发现抖动出来的图案将会具备一些“大的结构”, 因为白噪声在高频和低频的功率密度是个常数, 过强的低频噪声会导致误差分布得不均匀. 此时我们可以尝试弱化低频噪声, 使用一个蓝噪声来进行抖动, 蓝噪声的功率密度会随频率升高而升高[6], 因此使用一个蓝噪声控制抖动可以使误差分布得更加均匀.\n\n用shader写出一个蓝噪声非常复杂, 而且没啥意义, 因为可以使用一个纹理代替这一计算过程, 只需要使用取得的纹理值代替Bayer表中取出的内容即可. 关于蓝噪声纹理的计算过程, 感兴趣的同学可以读下[Free blue noise textures](http://momentsingraphics.de/BlueNoise.html)[5], 其中介绍得比较详细, 包括在什么情况下会遇到色带(*Color Banding*), 以及如何使用抖动修复色带问题.\n\n# 实战一个DitherFade\n\n用的Unity, 没怎么写过这个东西(菜得很), 稍微记一下遇到了哪些问题:\n\n1. 需要注意View Space下视线方向是-z;\n2. _ProjectionParams可以获得投影相关的信息, 比如这里用到的_ProjectionParams.y就是近平面距离;\n3. 屏幕坐标用ComputeScreenPos算, 参数是裁剪空间下的顶点坐标, 需要注意这个函数的输出会有w分量, 需要除以自身的w分量;\n4. 不要忘记写 ```UNITY_INITIALIZE_OUTPUT``` ;\n5. 最终报出下面这个错来, 没弄明白怎么解决这个问题, 索性把 ```#pragma target 3.0``` 换成 ```#pragma target 4.0``` 了.\n\n```log\nShader error in 'Test/DitherFade': Too many texture interpolators would be used for ForwardBase pass (11 out of max 10) at line 16.\n```\n\n实现的效果看上去像这个样子, 代码见文章末尾:\n\n![DitherFade实现效果, 能看出来距离屏幕近的部分透明程度较高, 而胶囊体底端由于距离屏幕较远没有透明](dither_fade_result.png)\n\n关于这里我有一个想法, 在玩游戏的时候发现游戏内角色透明时不会因物体不同位置的深度产生差异, 也就是说整个物体的透明度感觉是一致的. 因此猜测为了节约对屏幕空间坐标和片段的深度值的差值计算, 可以采用cpu计算距离, 并使用uniform的方式传入距离用于显示, 兴许对于需要节约资源的移动端有不错的效果吧.\n\n# 参考 & 感谢\n\n[1] [抖动算法小议1](https://blog.csdn.net/coolbacon/article/details/4041988)\n\n[2] [Ordered dithering - Wikipedia](https://en.wikipedia.org/wiki/Ordered_dithering)\n\n[3] [什么是抖色Dithering?——节选自《高兴说显示进阶篇之三》](https://zhuanlan.zhihu.com/p/33637225)\n\n[4] [OpenGL gradient “banding” artifacts](https://stackoverflow.com/questions/16005952/opengl-gradient-banding-artifacts)\n\n[5] [Free blue noise textures](http://momentsingraphics.de/BlueNoise.html)\n\n[6] [有色噪声_百度百科](https://baike.baidu.com/item/%E6%9C%89%E8%89%B2%E5%99%AA%E5%A3%B0)\n\n[7] [AD/DA 破解数字信号的玄学 Digital Show and Tell](https://www.bilibili.com/video/BV1k4411J7Fi)\n\n# 附录: 代码\n\n这部分内容是拆开来的, 需要把相关的部分拼起来运行. 顺带一提图片是用Image.save保存的.\n\n1. 图是用pillow画的\n\n```python\nfrom PIL import Image\nfrom PIL.ImageFilter import GaussianBlur\nimport random\n```\n\n2. Bayer矩阵定义\n\n```python\nBAYER_DITHER_MATRIX = [\n     0, 48, 12, 60,  3, 51, 15, 63,\n    32, 16, 44, 28, 35, 19, 47, 31,\n     8, 56,  4, 52, 11, 59,  7, 55,\n    40, 24, 36, 20, 43, 27, 39, 23,\n     2, 50, 14, 62,  1, 49, 13, 61,\n    34, 18, 46, 30, 33, 17, 45, 29,\n    10, 58,  6, 54,  9, 57,  5, 53,\n    42, 26, 38, 22, 41, 25, 37, 21,\n]\n\ndef get_dither(x, y):\n    return BAYER_DITHER_MATRIX[(x % 8) * 8 + (y % 8)]\n```\n\n3. 白噪声抖动(原图/高斯模糊)与Bayer有序抖动附图\n\n```python\nimg_white = Image.new('RGB', (512, 64))\nimg_bayer = Image.new('RGB', (512, 64))\nfor i in range(512):\n    for j in range(64):\n        c0 = i * 256 / 512  # expected color\n        mask = int(random.random() * 255)\n        c = 0 if c0 <= mask else 255\n        img_white.putpixel((i, j), (c, c, c))\n        mask = get_dither(i, j) * 4\n        c = 0 if c0 <= mask else 255\n        img_bayer.putpixel((i, j), (c, c, c))\n\nimg_blurred = img_white.filter(GaussianBlur(radius=3))\nimg_white.show()\nimg_blurred.show()\nimg_bayer.show()\n```\n\n4. Floyd-Steinberg抖动算法附图\n\n```python\nimg = Image.new('RGB', (512, 256))\nsrc = [[(i + j) / 2 for j in range(256)] for i in range(256)]\nfor i in range(256):  # column\n    for j in range(256):  # row\n        # left side of original image\n        c0 = (i + j) / 2\n        img.putpixel((i, j), (c0, c0, c0))\n        # right side of dithered image\n        c = 0 if src[i][j] < 127.5 else 255\n        e = src[i][j] - c1\n        if i + 1 < len(src):\n            src[i+1][j] += e * 0.375\n        if j + 1 < len(src):\n            src[i][j+1] += e * 0.375\n        if i + 1 < len(src) and j + 1 < len(src):\n            src[i+1][j+1] += e * 0.25\n        img.putpixel((i + 256, j), (c, c, c))\n\nimg.show()\n```\n\n5. DitherFade Shader附图(代码类型随便选了个glsl, 为了语法高亮)\n\n```glsl\nShader \"Test/DitherFade\"\n{\n    Properties\n    {\n        _Color (\"Color\", Color) = (1,1,1,1)\n        _MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n        _Glossiness (\"Smoothness\", Range(0,1)) = 0.5\n        _Metallic (\"Metallic\", Range(0,1)) = 0.0\n        _BeginFade (\"Begin Fade Distance\", Float) = 0.0\n        _EndFade (\"End Fade Distance\", Float) = 1.0\n    }\n    SubShader\n    {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 200\n        CGPROGRAM\n        #pragma surface surf Standard fullforwardshadows vertex:vert\n        #pragma target 4.0\n        struct Input\n        {\n            fixed2 uv_MainTex;\n            fixed distance;\n            fixed4 screenPosition;\n        };\n        uniform sampler2D _MainTex;\n        uniform half _Glossiness;\n        uniform half _Metallic;\n        uniform fixed4 _Color;\n        uniform float _BeginFade;\n        uniform float _EndFade;\n        inline float DitherMatrix(int x, int y)\n        {\n            const float dm[ 64 ] = {\n                 1, 49, 13, 61,  4, 52, 16, 64,\n                33, 17, 45, 29, 36, 20, 48, 32,\n                 9, 57,  5, 53, 12, 60,  8, 56,\n                41, 25, 37, 21, 44, 28, 40, 24,\n                 3, 51, 15, 63,  2, 50, 14, 62,\n                35, 19, 47, 31, 34, 18, 46, 30,\n                11, 59,  7, 55, 10, 58,  6, 54,\n                43, 27, 39, 23, 42, 26, 38, 22};\n            return dm[y * 8 + x] / 64;\n        }\n        void vert(inout appdata_full v, out Input o)\n        {\n            UNITY_INITIALIZE_OUTPUT(Input, o);\n            o.distance = -UnityObjectToViewPos(v.vertex).z;\n            o.screenPosition = ComputeScreenPos(UnityObjectToClipPos(v.vertex));\n        }\n        void surf(Input i, inout SurfaceOutputStandard o)\n        {\n            fixed4 c = tex2D(_MainTex, i.uv_MainTex) * _Color;\n            o.Albedo = c.rgb;\n            o.Metallic = _Metallic;\n            o.Smoothness = _Glossiness;\n            o.Alpha = c.a;\n            float4 sp = i.screenPosition / i.screenPosition.w;\n            sp.xy = sp.xy * _ScreenParams.xy;\n            float msk = DitherMatrix(fmod(sp.x, 8), fmod(sp.y, 8));\n            clip((i.distance - _ProjectionParams.y - _BeginFade) / (_ProjectionParams.y + _EndFade) - msk);\n        }\n        ENDCG\n    }\n    FallBack \"Diffuse\"\n}\n```\n\n","source":"_posts/ditherfade.md","raw":"---\ntitle: Dither Fade效果学习\ndate: 2021-01-11 10:27:45\ncategories: shader\n---\n\n前几天看了Dithering相关的一些内容, 没有深入了解, 但是感觉值得记录一下.\n\n最初是因为在Unity的Amplify Shader Editor这个包 (很好的工具!) 的例子中看到了一个效果, 名字叫做Dithering Fade. 顺带一提这个效果以前被我误以为是screen-door透明, 其实不是, 透明的效果和这个还是差很多的. 抖出来的透明效果在性能上快得很, 而且随着像素密度的升高效果也很不错, 所以比较适合手机环境.\n\nAmplify Shader Editor中提供了两版实现, 一种是使用Bayer抖动表, 另一种则是使用Blue Noise Sampling做的.\n\n# 什么是Dithering?\n\n> 就好像哪怕我只有0度的水和100度的水，只要调整好比例，理论上我也能混合出0度到100度之间任何温度的水。[3]\n\n抖动(*dither*), 是指一种特意引入的噪声, 用于替代简单量化产生的误差. 不仅出现在图形处理中色彩表示精度不足的情况, 在音频处理中也常常用于构造一个平坦底噪来替代简单量化产生的谐波失真.\n\n**但是!** 抖动并不能解决图像中的失真现象, 它通过引入随机变量的方式来使变化更加平滑, 这样的效果是因为人的眼睛倾向于忽略随机噪声. 这就好比使用黑白二值表示灰度图像, 只需在更黑的地方增加黑点的数量, 在较亮的部位减少黑点的数量就可以. 这并没有改变图像中只有黑白二值的规定, 但是肉眼却能看出不同的颜色, 这个方法也被称为*图案法*[1].\n\n比方说现在有这样一张8位灰度图:\n\n![0到255渐变](dither_example_0.png)\n\n考虑一个极端情况, 将这张图的位深缩减为1位, 如果采用四舍五入的方式决定颜色就会发生失真, 变成下面这个样子:\n\n![0到1, 或许也可称之为渐变](dither_example_1.png)\n\n而实际上在左半侧图像内将1\\~127的值处理为0, 或是在右半侧图像中将128\\~254处理为255都是存在误差的, 因此要更好地表示出颜色连续的变化, 可以考虑将误差扩散到附近的点, 改变他们的值以使误差的分布更加均匀. 那么问题来了, 改变哪一个点的颜色呢? 如果随机地为点加一个颜色的偏差值, 看上去会是这个样子:\n\n![随机抖动的结果, 一定程度上还原出了原始图像](dither_example_2.png)\n\nok, 这个图已经有点那个意思了, 通过加入一个白噪声把简单量化的误差遮过去了, 但是可能最终图片和原始图片并不相像, 这一点通过取一个高斯模糊就能看出.\n\n![实际上与原始图像相比多了许多没有的特征, 比如偏白色的区域内有黑色聚集](dither_example_3.png)\n\n# 有序抖动与Bayer抖动表\n\n为了使变化看上去更加均匀, 我们可以使用一个固定的矩阵与图像中的内容做比较, 当图像亮度大于矩阵时画一个白点儿, 反之则画一个黑点儿, 这样便可以在考虑到误差的情况下较为均匀地表示一个范围内的变化与误差. 现在我们称这种方法为有序抖动(*ordered dithering*).\n\nLimb于1969年提出了一种标准图案设计的算法, 如下定义[1]:<font color=white>(我大意了啊! 居然不支持latex公式渲染! 这让我对以后的笔记十分担忧)</font>\n\n![公式定义](equation_0.png)\n\n特殊地, M3矩阵被称为Bayer有序抖动矩阵(*Bayer Ordered Dither Matrix*), 也成Bayer抖动表, 内容如下[2]:\n\n![Bayer抖动表](equation_1.png)\n\n在上面灰度图像转换为黑白二值图像的过程中使用该方法进行抖动, 将会得到这样一个结果:\n\n![Bayer抖动结果](dither_example_4.png)\n\n这效果眼熟至极, 早年间的各路游戏机屏幕上常常会出现这种充斥着叉叉和对角线的显示效果, 就是为了提高显示的效果.\n\n# Floyd-Steinberg算法\n\n但是上面给出的效果“并不好看”, 实际上在抖动的过程中由于矩阵内容的特殊性, 引入了许多原图像中并不存在的特征, 图案法产生的图案化非常明显, 而且并不能很好地显示颜色误差过低的情况. 另一个更好的方法是将误差传递到相邻的像素, 并且累积下来, Floyd-Steinberg算法采用的就是这个方法.\n\n设原图像颜色显示误差为e, 则分别将(3/8)e加到右方和下方的像素颜色上, 并将(1/4)e加到右下方像素的颜色上. 使用这种抖动方法绘制的图片像这样:\n\n![Floyd-Steinberg算法抖动结果](dither_example_5.png)\n\n这张图与上面的结果相比是看不出什么图案的, 也就是说, 它更加接近于原图像了.\n\n# 使用蓝噪声(*Blue Noise*)进行抖动\n\n学习过OpenGL的同学可能有所了解, 自带的GL_DITHER是默认开启的, 但当我们使用8位色去渲染物体时仍然会出现轻微的colour banding artifacts, 这是因为多数OpenGL版本中对于GL_DITHER只做了个空实现, 没有加入抖动效果[4]. 有时需要我们手动加入抖动效果, 那么问题就出现了, Bayer抖动表会引入图案化, 而Floyd-Steinberg算法的代价高, 因此可以传统艺能再现, 使用一个噪声来控制抖动.\n\n这个噪声需要一些良好的特性, 如果直接生成一个白噪声(*White Noise*), 你会发现抖动出来的图案将会具备一些“大的结构”, 因为白噪声在高频和低频的功率密度是个常数, 过强的低频噪声会导致误差分布得不均匀. 此时我们可以尝试弱化低频噪声, 使用一个蓝噪声来进行抖动, 蓝噪声的功率密度会随频率升高而升高[6], 因此使用一个蓝噪声控制抖动可以使误差分布得更加均匀.\n\n用shader写出一个蓝噪声非常复杂, 而且没啥意义, 因为可以使用一个纹理代替这一计算过程, 只需要使用取得的纹理值代替Bayer表中取出的内容即可. 关于蓝噪声纹理的计算过程, 感兴趣的同学可以读下[Free blue noise textures](http://momentsingraphics.de/BlueNoise.html)[5], 其中介绍得比较详细, 包括在什么情况下会遇到色带(*Color Banding*), 以及如何使用抖动修复色带问题.\n\n# 实战一个DitherFade\n\n用的Unity, 没怎么写过这个东西(菜得很), 稍微记一下遇到了哪些问题:\n\n1. 需要注意View Space下视线方向是-z;\n2. _ProjectionParams可以获得投影相关的信息, 比如这里用到的_ProjectionParams.y就是近平面距离;\n3. 屏幕坐标用ComputeScreenPos算, 参数是裁剪空间下的顶点坐标, 需要注意这个函数的输出会有w分量, 需要除以自身的w分量;\n4. 不要忘记写 ```UNITY_INITIALIZE_OUTPUT``` ;\n5. 最终报出下面这个错来, 没弄明白怎么解决这个问题, 索性把 ```#pragma target 3.0``` 换成 ```#pragma target 4.0``` 了.\n\n```log\nShader error in 'Test/DitherFade': Too many texture interpolators would be used for ForwardBase pass (11 out of max 10) at line 16.\n```\n\n实现的效果看上去像这个样子, 代码见文章末尾:\n\n![DitherFade实现效果, 能看出来距离屏幕近的部分透明程度较高, 而胶囊体底端由于距离屏幕较远没有透明](dither_fade_result.png)\n\n关于这里我有一个想法, 在玩游戏的时候发现游戏内角色透明时不会因物体不同位置的深度产生差异, 也就是说整个物体的透明度感觉是一致的. 因此猜测为了节约对屏幕空间坐标和片段的深度值的差值计算, 可以采用cpu计算距离, 并使用uniform的方式传入距离用于显示, 兴许对于需要节约资源的移动端有不错的效果吧.\n\n# 参考 & 感谢\n\n[1] [抖动算法小议1](https://blog.csdn.net/coolbacon/article/details/4041988)\n\n[2] [Ordered dithering - Wikipedia](https://en.wikipedia.org/wiki/Ordered_dithering)\n\n[3] [什么是抖色Dithering?——节选自《高兴说显示进阶篇之三》](https://zhuanlan.zhihu.com/p/33637225)\n\n[4] [OpenGL gradient “banding” artifacts](https://stackoverflow.com/questions/16005952/opengl-gradient-banding-artifacts)\n\n[5] [Free blue noise textures](http://momentsingraphics.de/BlueNoise.html)\n\n[6] [有色噪声_百度百科](https://baike.baidu.com/item/%E6%9C%89%E8%89%B2%E5%99%AA%E5%A3%B0)\n\n[7] [AD/DA 破解数字信号的玄学 Digital Show and Tell](https://www.bilibili.com/video/BV1k4411J7Fi)\n\n# 附录: 代码\n\n这部分内容是拆开来的, 需要把相关的部分拼起来运行. 顺带一提图片是用Image.save保存的.\n\n1. 图是用pillow画的\n\n```python\nfrom PIL import Image\nfrom PIL.ImageFilter import GaussianBlur\nimport random\n```\n\n2. Bayer矩阵定义\n\n```python\nBAYER_DITHER_MATRIX = [\n     0, 48, 12, 60,  3, 51, 15, 63,\n    32, 16, 44, 28, 35, 19, 47, 31,\n     8, 56,  4, 52, 11, 59,  7, 55,\n    40, 24, 36, 20, 43, 27, 39, 23,\n     2, 50, 14, 62,  1, 49, 13, 61,\n    34, 18, 46, 30, 33, 17, 45, 29,\n    10, 58,  6, 54,  9, 57,  5, 53,\n    42, 26, 38, 22, 41, 25, 37, 21,\n]\n\ndef get_dither(x, y):\n    return BAYER_DITHER_MATRIX[(x % 8) * 8 + (y % 8)]\n```\n\n3. 白噪声抖动(原图/高斯模糊)与Bayer有序抖动附图\n\n```python\nimg_white = Image.new('RGB', (512, 64))\nimg_bayer = Image.new('RGB', (512, 64))\nfor i in range(512):\n    for j in range(64):\n        c0 = i * 256 / 512  # expected color\n        mask = int(random.random() * 255)\n        c = 0 if c0 <= mask else 255\n        img_white.putpixel((i, j), (c, c, c))\n        mask = get_dither(i, j) * 4\n        c = 0 if c0 <= mask else 255\n        img_bayer.putpixel((i, j), (c, c, c))\n\nimg_blurred = img_white.filter(GaussianBlur(radius=3))\nimg_white.show()\nimg_blurred.show()\nimg_bayer.show()\n```\n\n4. Floyd-Steinberg抖动算法附图\n\n```python\nimg = Image.new('RGB', (512, 256))\nsrc = [[(i + j) / 2 for j in range(256)] for i in range(256)]\nfor i in range(256):  # column\n    for j in range(256):  # row\n        # left side of original image\n        c0 = (i + j) / 2\n        img.putpixel((i, j), (c0, c0, c0))\n        # right side of dithered image\n        c = 0 if src[i][j] < 127.5 else 255\n        e = src[i][j] - c1\n        if i + 1 < len(src):\n            src[i+1][j] += e * 0.375\n        if j + 1 < len(src):\n            src[i][j+1] += e * 0.375\n        if i + 1 < len(src) and j + 1 < len(src):\n            src[i+1][j+1] += e * 0.25\n        img.putpixel((i + 256, j), (c, c, c))\n\nimg.show()\n```\n\n5. DitherFade Shader附图(代码类型随便选了个glsl, 为了语法高亮)\n\n```glsl\nShader \"Test/DitherFade\"\n{\n    Properties\n    {\n        _Color (\"Color\", Color) = (1,1,1,1)\n        _MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n        _Glossiness (\"Smoothness\", Range(0,1)) = 0.5\n        _Metallic (\"Metallic\", Range(0,1)) = 0.0\n        _BeginFade (\"Begin Fade Distance\", Float) = 0.0\n        _EndFade (\"End Fade Distance\", Float) = 1.0\n    }\n    SubShader\n    {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 200\n        CGPROGRAM\n        #pragma surface surf Standard fullforwardshadows vertex:vert\n        #pragma target 4.0\n        struct Input\n        {\n            fixed2 uv_MainTex;\n            fixed distance;\n            fixed4 screenPosition;\n        };\n        uniform sampler2D _MainTex;\n        uniform half _Glossiness;\n        uniform half _Metallic;\n        uniform fixed4 _Color;\n        uniform float _BeginFade;\n        uniform float _EndFade;\n        inline float DitherMatrix(int x, int y)\n        {\n            const float dm[ 64 ] = {\n                 1, 49, 13, 61,  4, 52, 16, 64,\n                33, 17, 45, 29, 36, 20, 48, 32,\n                 9, 57,  5, 53, 12, 60,  8, 56,\n                41, 25, 37, 21, 44, 28, 40, 24,\n                 3, 51, 15, 63,  2, 50, 14, 62,\n                35, 19, 47, 31, 34, 18, 46, 30,\n                11, 59,  7, 55, 10, 58,  6, 54,\n                43, 27, 39, 23, 42, 26, 38, 22};\n            return dm[y * 8 + x] / 64;\n        }\n        void vert(inout appdata_full v, out Input o)\n        {\n            UNITY_INITIALIZE_OUTPUT(Input, o);\n            o.distance = -UnityObjectToViewPos(v.vertex).z;\n            o.screenPosition = ComputeScreenPos(UnityObjectToClipPos(v.vertex));\n        }\n        void surf(Input i, inout SurfaceOutputStandard o)\n        {\n            fixed4 c = tex2D(_MainTex, i.uv_MainTex) * _Color;\n            o.Albedo = c.rgb;\n            o.Metallic = _Metallic;\n            o.Smoothness = _Glossiness;\n            o.Alpha = c.a;\n            float4 sp = i.screenPosition / i.screenPosition.w;\n            sp.xy = sp.xy * _ScreenParams.xy;\n            float msk = DitherMatrix(fmod(sp.x, 8), fmod(sp.y, 8));\n            clip((i.distance - _ProjectionParams.y - _BeginFade) / (_ProjectionParams.y + _EndFade) - msk);\n        }\n        ENDCG\n    }\n    FallBack \"Diffuse\"\n}\n```\n\n","slug":"ditherfade","published":1,"updated":"2021-09-24T04:10:38.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq650005lmfygigr56ap","content":"<p>前几天看了Dithering相关的一些内容, 没有深入了解, 但是感觉值得记录一下.</p>\n<p>最初是因为在Unity的Amplify Shader Editor这个包 (很好的工具!) 的例子中看到了一个效果, 名字叫做Dithering Fade. 顺带一提这个效果以前被我误以为是screen-door透明, 其实不是, 透明的效果和这个还是差很多的. 抖出来的透明效果在性能上快得很, 而且随着像素密度的升高效果也很不错, 所以比较适合手机环境.</p>\n<p>Amplify Shader Editor中提供了两版实现, 一种是使用Bayer抖动表, 另一种则是使用Blue Noise Sampling做的.</p>\n<h1 id=\"什么是dithering\">什么是Dithering?</h1>\n<blockquote>\n<p>就好像哪怕我只有0度的水和100度的水，只要调整好比例，理论上我也能混合出0度到100度之间任何温度的水。[3]</p>\n</blockquote>\n<p>抖动(<em>dither</em>), 是指一种特意引入的噪声, 用于替代简单量化产生的误差. 不仅出现在图形处理中色彩表示精度不足的情况, 在音频处理中也常常用于构造一个平坦底噪来替代简单量化产生的谐波失真.</p>\n<p><strong>但是!</strong> 抖动并不能解决图像中的失真现象, 它通过引入随机变量的方式来使变化更加平滑, 这样的效果是因为人的眼睛倾向于忽略随机噪声. 这就好比使用黑白二值表示灰度图像, 只需在更黑的地方增加黑点的数量, 在较亮的部位减少黑点的数量就可以. 这并没有改变图像中只有黑白二值的规定, 但是肉眼却能看出不同的颜色, 这个方法也被称为<em>图案法</em>[1].</p>\n<p>比方说现在有这样一张8位灰度图:</p>\n<p><img src=\"/ditherfade/dither_example_0.png\" alt=\"0到255渐变\"></p>\n<p>考虑一个极端情况, 将这张图的位深缩减为1位, 如果采用四舍五入的方式决定颜色就会发生失真, 变成下面这个样子:</p>\n<p><img src=\"/ditherfade/dither_example_1.png\" alt=\"0到1, 或许也可称之为渐变\"></p>\n<p>而实际上在左半侧图像内将1~127的值处理为0, 或是在右半侧图像中将128~254处理为255都是存在误差的, 因此要更好地表示出颜色连续的变化, 可以考虑将误差扩散到附近的点, 改变他们的值以使误差的分布更加均匀. 那么问题来了, 改变哪一个点的颜色呢? 如果随机地为点加一个颜色的偏差值, 看上去会是这个样子:</p>\n<p><img src=\"/ditherfade/dither_example_2.png\" alt=\"随机抖动的结果, 一定程度上还原出了原始图像\"></p>\n<p>ok, 这个图已经有点那个意思了, 通过加入一个白噪声把简单量化的误差遮过去了, 但是可能最终图片和原始图片并不相像, 这一点通过取一个高斯模糊就能看出.</p>\n<p><img src=\"/ditherfade/dither_example_3.png\" alt=\"实际上与原始图像相比多了许多没有的特征, 比如偏白色的区域内有黑色聚集\"></p>\n<h1 id=\"有序抖动与bayer抖动表\">有序抖动与Bayer抖动表</h1>\n<p>为了使变化看上去更加均匀, 我们可以使用一个固定的矩阵与图像中的内容做比较, 当图像亮度大于矩阵时画一个白点儿, 反之则画一个黑点儿, 这样便可以在考虑到误差的情况下较为均匀地表示一个范围内的变化与误差. 现在我们称这种方法为有序抖动(<em>ordered dithering</em>).</p>\n<p>Limb于1969年提出了一种标准图案设计的算法, 如下定义[1]:<font color=\"white\">(我大意了啊! 居然不支持latex公式渲染! 这让我对以后的笔记十分担忧)</font></p>\n<p><img src=\"/ditherfade/equation_0.png\" alt=\"公式定义\"></p>\n<p>特殊地, M3矩阵被称为Bayer有序抖动矩阵(<em>Bayer Ordered Dither Matrix</em>), 也成Bayer抖动表, 内容如下[2]:</p>\n<p><img src=\"/ditherfade/equation_1.png\" alt=\"Bayer抖动表\"></p>\n<p>在上面灰度图像转换为黑白二值图像的过程中使用该方法进行抖动, 将会得到这样一个结果:</p>\n<p><img src=\"/ditherfade/dither_example_4.png\" alt=\"Bayer抖动结果\"></p>\n<p>这效果眼熟至极, 早年间的各路游戏机屏幕上常常会出现这种充斥着叉叉和对角线的显示效果, 就是为了提高显示的效果.</p>\n<h1 id=\"floyd-steinberg算法\">Floyd-Steinberg算法</h1>\n<p>但是上面给出的效果“并不好看”, 实际上在抖动的过程中由于矩阵内容的特殊性, 引入了许多原图像中并不存在的特征, 图案法产生的图案化非常明显, 而且并不能很好地显示颜色误差过低的情况. 另一个更好的方法是将误差传递到相邻的像素, 并且累积下来, Floyd-Steinberg算法采用的就是这个方法.</p>\n<p>设原图像颜色显示误差为e, 则分别将(3/8)e加到右方和下方的像素颜色上, 并将(1/4)e加到右下方像素的颜色上. 使用这种抖动方法绘制的图片像这样:</p>\n<p><img src=\"/ditherfade/dither_example_5.png\" alt=\"Floyd-Steinberg算法抖动结果\"></p>\n<p>这张图与上面的结果相比是看不出什么图案的, 也就是说, 它更加接近于原图像了.</p>\n<h1 id=\"使用蓝噪声blue-noise进行抖动\">使用蓝噪声(<em>Blue Noise</em>)进行抖动</h1>\n<p>学习过OpenGL的同学可能有所了解, 自带的GL_DITHER是默认开启的, 但当我们使用8位色去渲染物体时仍然会出现轻微的colour banding artifacts, 这是因为多数OpenGL版本中对于GL_DITHER只做了个空实现, 没有加入抖动效果[4]. 有时需要我们手动加入抖动效果, 那么问题就出现了, Bayer抖动表会引入图案化, 而Floyd-Steinberg算法的代价高, 因此可以传统艺能再现, 使用一个噪声来控制抖动.</p>\n<p>这个噪声需要一些良好的特性, 如果直接生成一个白噪声(<em>White Noise</em>), 你会发现抖动出来的图案将会具备一些“大的结构”, 因为白噪声在高频和低频的功率密度是个常数, 过强的低频噪声会导致误差分布得不均匀. 此时我们可以尝试弱化低频噪声, 使用一个蓝噪声来进行抖动, 蓝噪声的功率密度会随频率升高而升高[6], 因此使用一个蓝噪声控制抖动可以使误差分布得更加均匀.</p>\n<p>用shader写出一个蓝噪声非常复杂, 而且没啥意义, 因为可以使用一个纹理代替这一计算过程, 只需要使用取得的纹理值代替Bayer表中取出的内容即可. 关于蓝噪声纹理的计算过程, 感兴趣的同学可以读下<a href=\"http://momentsingraphics.de/BlueNoise.html\">Free blue noise textures</a>[5], 其中介绍得比较详细, 包括在什么情况下会遇到色带(<em>Color Banding</em>), 以及如何使用抖动修复色带问题.</p>\n<h1 id=\"实战一个ditherfade\">实战一个DitherFade</h1>\n<p>用的Unity, 没怎么写过这个东西(菜得很), 稍微记一下遇到了哪些问题:</p>\n<ol type=\"1\">\n<li>需要注意View Space下视线方向是-z;</li>\n<li>_ProjectionParams可以获得投影相关的信息, 比如这里用到的_ProjectionParams.y就是近平面距离;</li>\n<li>屏幕坐标用ComputeScreenPos算, 参数是裁剪空间下的顶点坐标, 需要注意这个函数的输出会有w分量, 需要除以自身的w分量;</li>\n<li>不要忘记写 <code>UNITY_INITIALIZE_OUTPUT</code> ;</li>\n<li>最终报出下面这个错来, 没弄明白怎么解决这个问题, 索性把 <code>#pragma target 3.0</code> 换成 <code>#pragma target 4.0</code> 了.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader error in &#39;Test&#x2F;DitherFade&#39;: Too many texture interpolators would be used for ForwardBase pass (11 out of max 10) at line 16.</span><br></pre></td></tr></table></figure>\n<p>实现的效果看上去像这个样子, 代码见文章末尾:</p>\n<p><img src=\"/ditherfade/dither_fade_result.png\" alt=\"DitherFade实现效果, 能看出来距离屏幕近的部分透明程度较高, 而胶囊体底端由于距离屏幕较远没有透明\"></p>\n<p>关于这里我有一个想法, 在玩游戏的时候发现游戏内角色透明时不会因物体不同位置的深度产生差异, 也就是说整个物体的透明度感觉是一致的. 因此猜测为了节约对屏幕空间坐标和片段的深度值的差值计算, 可以采用cpu计算距离, 并使用uniform的方式传入距离用于显示, 兴许对于需要节约资源的移动端有不错的效果吧.</p>\n<h1 id=\"参考-感谢\">参考 &amp; 感谢</h1>\n<p>[1] <a href=\"https://blog.csdn.net/coolbacon/article/details/4041988\">抖动算法小议1</a></p>\n<p>[2] <a href=\"https://en.wikipedia.org/wiki/Ordered_dithering\">Ordered dithering - Wikipedia</a></p>\n<p>[3] <a href=\"https://zhuanlan.zhihu.com/p/33637225\">什么是抖色Dithering?——节选自《高兴说显示进阶篇之三》</a></p>\n<p>[4] <a href=\"https://stackoverflow.com/questions/16005952/opengl-gradient-banding-artifacts\">OpenGL gradient “banding” artifacts</a></p>\n<p>[5] <a href=\"http://momentsingraphics.de/BlueNoise.html\">Free blue noise textures</a></p>\n<p>[6] <a href=\"https://baike.baidu.com/item/%E6%9C%89%E8%89%B2%E5%99%AA%E5%A3%B0\">有色噪声_百度百科</a></p>\n<p>[7] <a href=\"https://www.bilibili.com/video/BV1k4411J7Fi\">AD/DA 破解数字信号的玄学 Digital Show and Tell</a></p>\n<h1 id=\"附录-代码\">附录: 代码</h1>\n<p>这部分内容是拆开来的, 需要把相关的部分拼起来运行. 顺带一提图片是用Image.save保存的.</p>\n<ol type=\"1\">\n<li>图是用pillow画的</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL.ImageFilter <span class=\"keyword\">import</span> GaussianBlur</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>Bayer矩阵定义</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BAYER_DITHER_MATRIX = [</span><br><span class=\"line\">     <span class=\"number\">0</span>, <span class=\"number\">48</span>, <span class=\"number\">12</span>, <span class=\"number\">60</span>,  <span class=\"number\">3</span>, <span class=\"number\">51</span>, <span class=\"number\">15</span>, <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">44</span>, <span class=\"number\">28</span>, <span class=\"number\">35</span>, <span class=\"number\">19</span>, <span class=\"number\">47</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">     <span class=\"number\">8</span>, <span class=\"number\">56</span>,  <span class=\"number\">4</span>, <span class=\"number\">52</span>, <span class=\"number\">11</span>, <span class=\"number\">59</span>,  <span class=\"number\">7</span>, <span class=\"number\">55</span>,</span><br><span class=\"line\">    <span class=\"number\">40</span>, <span class=\"number\">24</span>, <span class=\"number\">36</span>, <span class=\"number\">20</span>, <span class=\"number\">43</span>, <span class=\"number\">27</span>, <span class=\"number\">39</span>, <span class=\"number\">23</span>,</span><br><span class=\"line\">     <span class=\"number\">2</span>, <span class=\"number\">50</span>, <span class=\"number\">14</span>, <span class=\"number\">62</span>,  <span class=\"number\">1</span>, <span class=\"number\">49</span>, <span class=\"number\">13</span>, <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"number\">34</span>, <span class=\"number\">18</span>, <span class=\"number\">46</span>, <span class=\"number\">30</span>, <span class=\"number\">33</span>, <span class=\"number\">17</span>, <span class=\"number\">45</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span>, <span class=\"number\">58</span>,  <span class=\"number\">6</span>, <span class=\"number\">54</span>,  <span class=\"number\">9</span>, <span class=\"number\">57</span>,  <span class=\"number\">5</span>, <span class=\"number\">53</span>,</span><br><span class=\"line\">    <span class=\"number\">42</span>, <span class=\"number\">26</span>, <span class=\"number\">38</span>, <span class=\"number\">22</span>, <span class=\"number\">41</span>, <span class=\"number\">25</span>, <span class=\"number\">37</span>, <span class=\"number\">21</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dither</span>(<span class=\"params\">x, y</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BAYER_DITHER_MATRIX[(x % <span class=\"number\">8</span>) * <span class=\"number\">8</span> + (y % <span class=\"number\">8</span>)]</span><br></pre></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>白噪声抖动(原图/高斯模糊)与Bayer有序抖动附图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img_white = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">img_bayer = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">512</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">        c0 = i * <span class=\"number\">256</span> / <span class=\"number\">512</span>  <span class=\"comment\"># expected color</span></span><br><span class=\"line\">        mask = <span class=\"built_in\">int</span>(random.random() * <span class=\"number\">255</span>)</span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> c0 &lt;= mask <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        img_white.putpixel((i, j), (c, c, c))</span><br><span class=\"line\">        mask = get_dither(i, j) * <span class=\"number\">4</span></span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> c0 &lt;= mask <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        img_bayer.putpixel((i, j), (c, c, c))</span><br><span class=\"line\"></span><br><span class=\"line\">img_blurred = img_white.<span class=\"built_in\">filter</span>(GaussianBlur(radius=<span class=\"number\">3</span>))</span><br><span class=\"line\">img_white.show()</span><br><span class=\"line\">img_blurred.show()</span><br><span class=\"line\">img_bayer.show()</span><br></pre></td></tr></table></figure>\n<ol start=\"4\" type=\"1\">\n<li>Floyd-Steinberg抖动算法附图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">256</span>))</span><br><span class=\"line\">src = [[(i + j) / <span class=\"number\">2</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):  <span class=\"comment\"># column</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):  <span class=\"comment\"># row</span></span><br><span class=\"line\">        <span class=\"comment\"># left side of original image</span></span><br><span class=\"line\">        c0 = (i + j) / <span class=\"number\">2</span></span><br><span class=\"line\">        img.putpixel((i, j), (c0, c0, c0))</span><br><span class=\"line\">        <span class=\"comment\"># right side of dithered image</span></span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> src[i][j] &lt; <span class=\"number\">127.5</span> <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        e = src[i][j] - c1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i+<span class=\"number\">1</span>][j] += e * <span class=\"number\">0.375</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i][j+<span class=\"number\">1</span>] += e * <span class=\"number\">0.375</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src) <span class=\"keyword\">and</span> j + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] += e * <span class=\"number\">0.25</span></span><br><span class=\"line\">        img.putpixel((i + <span class=\"number\">256</span>, j), (c, c, c))</span><br><span class=\"line\"></span><br><span class=\"line\">img.show()</span><br></pre></td></tr></table></figure>\n<ol start=\"5\" type=\"1\">\n<li>DitherFade Shader附图(代码类型随便选了个glsl, 为了语法高亮)</li>\n</ol>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader &quot;Test/DitherFade&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Properties</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _Color (&quot;Color&quot;, Color) = (1,1,1,1)</span><br><span class=\"line\">        _MainTex (&quot;Albedo (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class=\"line\">        _Glossiness (&quot;Smoothness&quot;, Range(0,1)) = 0.5</span><br><span class=\"line\">        _Metallic (&quot;Metallic&quot;, Range(0,1)) = 0.0</span><br><span class=\"line\">        _BeginFade (&quot;Begin Fade Distance&quot;, Float) = 0.0</span><br><span class=\"line\">        _EndFade (&quot;End Fade Distance&quot;, Float) = 1.0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SubShader</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class=\"line\">        LOD <span class=\"number\">200</span></span><br><span class=\"line\">        CGPROGRAM</span><br><span class=\"line\">        <span class=\"meta\">#pragma surface surf Standard fullforwardshadows vertex:vert</span></span><br><span class=\"line\">        <span class=\"meta\">#pragma target 4.0</span></span><br><span class=\"line\">        struct Input</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fixed2 uv_MainTex;</span><br><span class=\"line\">            fixed <span class=\"built_in\">distance</span>;</span><br><span class=\"line\">            fixed4 screenPosition;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> _MainTex;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> half _Glossiness;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> half _Metallic;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> fixed4 _Color;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">float</span> _BeginFade;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">float</span> _EndFade;</span><br><span class=\"line\">        inline <span class=\"type\">float</span> DitherMatrix(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"type\">float</span> dm[ <span class=\"number\">64</span> ] = &#123;</span><br><span class=\"line\">                 <span class=\"number\">1</span>, <span class=\"number\">49</span>, <span class=\"number\">13</span>, <span class=\"number\">61</span>,  <span class=\"number\">4</span>, <span class=\"number\">52</span>, <span class=\"number\">16</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">                <span class=\"number\">33</span>, <span class=\"number\">17</span>, <span class=\"number\">45</span>, <span class=\"number\">29</span>, <span class=\"number\">36</span>, <span class=\"number\">20</span>, <span class=\"number\">48</span>, <span class=\"number\">32</span>,</span><br><span class=\"line\">                 <span class=\"number\">9</span>, <span class=\"number\">57</span>,  <span class=\"number\">5</span>, <span class=\"number\">53</span>, <span class=\"number\">12</span>, <span class=\"number\">60</span>,  <span class=\"number\">8</span>, <span class=\"number\">56</span>,</span><br><span class=\"line\">                <span class=\"number\">41</span>, <span class=\"number\">25</span>, <span class=\"number\">37</span>, <span class=\"number\">21</span>, <span class=\"number\">44</span>, <span class=\"number\">28</span>, <span class=\"number\">40</span>, <span class=\"number\">24</span>,</span><br><span class=\"line\">                 <span class=\"number\">3</span>, <span class=\"number\">51</span>, <span class=\"number\">15</span>, <span class=\"number\">63</span>,  <span class=\"number\">2</span>, <span class=\"number\">50</span>, <span class=\"number\">14</span>, <span class=\"number\">62</span>,</span><br><span class=\"line\">                <span class=\"number\">35</span>, <span class=\"number\">19</span>, <span class=\"number\">47</span>, <span class=\"number\">31</span>, <span class=\"number\">34</span>, <span class=\"number\">18</span>, <span class=\"number\">46</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                <span class=\"number\">11</span>, <span class=\"number\">59</span>,  <span class=\"number\">7</span>, <span class=\"number\">55</span>, <span class=\"number\">10</span>, <span class=\"number\">58</span>,  <span class=\"number\">6</span>, <span class=\"number\">54</span>,</span><br><span class=\"line\">                <span class=\"number\">43</span>, <span class=\"number\">27</span>, <span class=\"number\">39</span>, <span class=\"number\">23</span>, <span class=\"number\">42</span>, <span class=\"number\">26</span>, <span class=\"number\">38</span>, <span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dm[y * <span class=\"number\">8</span> + x] / <span class=\"number\">64</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">void</span> vert(<span class=\"keyword\">inout</span> appdata_full v, <span class=\"keyword\">out</span> Input o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UNITY_INITIALIZE_OUTPUT(Input, o);</span><br><span class=\"line\">            o.<span class=\"built_in\">distance</span> = -UnityObjectToViewPos(v.vertex).z;</span><br><span class=\"line\">            o.screenPosition = ComputeScreenPos(UnityObjectToClipPos(v.vertex));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">void</span> surf(Input i, <span class=\"keyword\">inout</span> SurfaceOutputStandard o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fixed4 c = tex2D(_MainTex, i.uv_MainTex) * _Color;</span><br><span class=\"line\">            o.Albedo = c.rgb;</span><br><span class=\"line\">            o.Metallic = _Metallic;</span><br><span class=\"line\">            o.Smoothness = _Glossiness;</span><br><span class=\"line\">            o.Alpha = c.a;</span><br><span class=\"line\">            float4 sp = i.screenPosition / i.screenPosition.w;</span><br><span class=\"line\">            sp.xy = sp.xy * _ScreenParams.xy;</span><br><span class=\"line\">            <span class=\"type\">float</span> msk = DitherMatrix(fmod(sp.x, <span class=\"number\">8</span>), fmod(sp.y, <span class=\"number\">8</span>));</span><br><span class=\"line\">            clip((i.<span class=\"built_in\">distance</span> - _ProjectionParams.y - _BeginFade) / (_ProjectionParams.y + _EndFade) - msk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ENDCG</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FallBack &quot;Diffuse&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天看了Dithering相关的一些内容, 没有深入了解, 但是感觉值得记录一下.</p>\n<p>最初是因为在Unity的Amplify Shader Editor这个包 (很好的工具!) 的例子中看到了一个效果, 名字叫做Dithering Fade. 顺带一提这个效果以前被我误以为是screen-door透明, 其实不是, 透明的效果和这个还是差很多的. 抖出来的透明效果在性能上快得很, 而且随着像素密度的升高效果也很不错, 所以比较适合手机环境.</p>\n<p>Amplify Shader Editor中提供了两版实现, 一种是使用Bayer抖动表, 另一种则是使用Blue Noise Sampling做的.</p>\n<h1 id=\"什么是dithering\">什么是Dithering?</h1>\n<blockquote>\n<p>就好像哪怕我只有0度的水和100度的水，只要调整好比例，理论上我也能混合出0度到100度之间任何温度的水。[3]</p>\n</blockquote>\n<p>抖动(<em>dither</em>), 是指一种特意引入的噪声, 用于替代简单量化产生的误差. 不仅出现在图形处理中色彩表示精度不足的情况, 在音频处理中也常常用于构造一个平坦底噪来替代简单量化产生的谐波失真.</p>\n<p><strong>但是!</strong> 抖动并不能解决图像中的失真现象, 它通过引入随机变量的方式来使变化更加平滑, 这样的效果是因为人的眼睛倾向于忽略随机噪声. 这就好比使用黑白二值表示灰度图像, 只需在更黑的地方增加黑点的数量, 在较亮的部位减少黑点的数量就可以. 这并没有改变图像中只有黑白二值的规定, 但是肉眼却能看出不同的颜色, 这个方法也被称为<em>图案法</em>[1].</p>\n<p>比方说现在有这样一张8位灰度图:</p>\n<p><img src=\"/ditherfade/dither_example_0.png\" alt=\"0到255渐变\"></p>\n<p>考虑一个极端情况, 将这张图的位深缩减为1位, 如果采用四舍五入的方式决定颜色就会发生失真, 变成下面这个样子:</p>\n<p><img src=\"/ditherfade/dither_example_1.png\" alt=\"0到1, 或许也可称之为渐变\"></p>\n<p>而实际上在左半侧图像内将1~127的值处理为0, 或是在右半侧图像中将128~254处理为255都是存在误差的, 因此要更好地表示出颜色连续的变化, 可以考虑将误差扩散到附近的点, 改变他们的值以使误差的分布更加均匀. 那么问题来了, 改变哪一个点的颜色呢? 如果随机地为点加一个颜色的偏差值, 看上去会是这个样子:</p>\n<p><img src=\"/ditherfade/dither_example_2.png\" alt=\"随机抖动的结果, 一定程度上还原出了原始图像\"></p>\n<p>ok, 这个图已经有点那个意思了, 通过加入一个白噪声把简单量化的误差遮过去了, 但是可能最终图片和原始图片并不相像, 这一点通过取一个高斯模糊就能看出.</p>\n<p><img src=\"/ditherfade/dither_example_3.png\" alt=\"实际上与原始图像相比多了许多没有的特征, 比如偏白色的区域内有黑色聚集\"></p>\n<h1 id=\"有序抖动与bayer抖动表\">有序抖动与Bayer抖动表</h1>\n<p>为了使变化看上去更加均匀, 我们可以使用一个固定的矩阵与图像中的内容做比较, 当图像亮度大于矩阵时画一个白点儿, 反之则画一个黑点儿, 这样便可以在考虑到误差的情况下较为均匀地表示一个范围内的变化与误差. 现在我们称这种方法为有序抖动(<em>ordered dithering</em>).</p>\n<p>Limb于1969年提出了一种标准图案设计的算法, 如下定义[1]:<font color=\"white\">(我大意了啊! 居然不支持latex公式渲染! 这让我对以后的笔记十分担忧)</font></p>\n<p><img src=\"/ditherfade/equation_0.png\" alt=\"公式定义\"></p>\n<p>特殊地, M3矩阵被称为Bayer有序抖动矩阵(<em>Bayer Ordered Dither Matrix</em>), 也成Bayer抖动表, 内容如下[2]:</p>\n<p><img src=\"/ditherfade/equation_1.png\" alt=\"Bayer抖动表\"></p>\n<p>在上面灰度图像转换为黑白二值图像的过程中使用该方法进行抖动, 将会得到这样一个结果:</p>\n<p><img src=\"/ditherfade/dither_example_4.png\" alt=\"Bayer抖动结果\"></p>\n<p>这效果眼熟至极, 早年间的各路游戏机屏幕上常常会出现这种充斥着叉叉和对角线的显示效果, 就是为了提高显示的效果.</p>\n<h1 id=\"floyd-steinberg算法\">Floyd-Steinberg算法</h1>\n<p>但是上面给出的效果“并不好看”, 实际上在抖动的过程中由于矩阵内容的特殊性, 引入了许多原图像中并不存在的特征, 图案法产生的图案化非常明显, 而且并不能很好地显示颜色误差过低的情况. 另一个更好的方法是将误差传递到相邻的像素, 并且累积下来, Floyd-Steinberg算法采用的就是这个方法.</p>\n<p>设原图像颜色显示误差为e, 则分别将(3/8)e加到右方和下方的像素颜色上, 并将(1/4)e加到右下方像素的颜色上. 使用这种抖动方法绘制的图片像这样:</p>\n<p><img src=\"/ditherfade/dither_example_5.png\" alt=\"Floyd-Steinberg算法抖动结果\"></p>\n<p>这张图与上面的结果相比是看不出什么图案的, 也就是说, 它更加接近于原图像了.</p>\n<h1 id=\"使用蓝噪声blue-noise进行抖动\">使用蓝噪声(<em>Blue Noise</em>)进行抖动</h1>\n<p>学习过OpenGL的同学可能有所了解, 自带的GL_DITHER是默认开启的, 但当我们使用8位色去渲染物体时仍然会出现轻微的colour banding artifacts, 这是因为多数OpenGL版本中对于GL_DITHER只做了个空实现, 没有加入抖动效果[4]. 有时需要我们手动加入抖动效果, 那么问题就出现了, Bayer抖动表会引入图案化, 而Floyd-Steinberg算法的代价高, 因此可以传统艺能再现, 使用一个噪声来控制抖动.</p>\n<p>这个噪声需要一些良好的特性, 如果直接生成一个白噪声(<em>White Noise</em>), 你会发现抖动出来的图案将会具备一些“大的结构”, 因为白噪声在高频和低频的功率密度是个常数, 过强的低频噪声会导致误差分布得不均匀. 此时我们可以尝试弱化低频噪声, 使用一个蓝噪声来进行抖动, 蓝噪声的功率密度会随频率升高而升高[6], 因此使用一个蓝噪声控制抖动可以使误差分布得更加均匀.</p>\n<p>用shader写出一个蓝噪声非常复杂, 而且没啥意义, 因为可以使用一个纹理代替这一计算过程, 只需要使用取得的纹理值代替Bayer表中取出的内容即可. 关于蓝噪声纹理的计算过程, 感兴趣的同学可以读下<a href=\"http://momentsingraphics.de/BlueNoise.html\">Free blue noise textures</a>[5], 其中介绍得比较详细, 包括在什么情况下会遇到色带(<em>Color Banding</em>), 以及如何使用抖动修复色带问题.</p>\n<h1 id=\"实战一个ditherfade\">实战一个DitherFade</h1>\n<p>用的Unity, 没怎么写过这个东西(菜得很), 稍微记一下遇到了哪些问题:</p>\n<ol type=\"1\">\n<li>需要注意View Space下视线方向是-z;</li>\n<li>_ProjectionParams可以获得投影相关的信息, 比如这里用到的_ProjectionParams.y就是近平面距离;</li>\n<li>屏幕坐标用ComputeScreenPos算, 参数是裁剪空间下的顶点坐标, 需要注意这个函数的输出会有w分量, 需要除以自身的w分量;</li>\n<li>不要忘记写 <code>UNITY_INITIALIZE_OUTPUT</code> ;</li>\n<li>最终报出下面这个错来, 没弄明白怎么解决这个问题, 索性把 <code>#pragma target 3.0</code> 换成 <code>#pragma target 4.0</code> 了.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader error in &#39;Test&#x2F;DitherFade&#39;: Too many texture interpolators would be used for ForwardBase pass (11 out of max 10) at line 16.</span><br></pre></td></tr></table></figure>\n<p>实现的效果看上去像这个样子, 代码见文章末尾:</p>\n<p><img src=\"/ditherfade/dither_fade_result.png\" alt=\"DitherFade实现效果, 能看出来距离屏幕近的部分透明程度较高, 而胶囊体底端由于距离屏幕较远没有透明\"></p>\n<p>关于这里我有一个想法, 在玩游戏的时候发现游戏内角色透明时不会因物体不同位置的深度产生差异, 也就是说整个物体的透明度感觉是一致的. 因此猜测为了节约对屏幕空间坐标和片段的深度值的差值计算, 可以采用cpu计算距离, 并使用uniform的方式传入距离用于显示, 兴许对于需要节约资源的移动端有不错的效果吧.</p>\n<h1 id=\"参考-感谢\">参考 &amp; 感谢</h1>\n<p>[1] <a href=\"https://blog.csdn.net/coolbacon/article/details/4041988\">抖动算法小议1</a></p>\n<p>[2] <a href=\"https://en.wikipedia.org/wiki/Ordered_dithering\">Ordered dithering - Wikipedia</a></p>\n<p>[3] <a href=\"https://zhuanlan.zhihu.com/p/33637225\">什么是抖色Dithering?——节选自《高兴说显示进阶篇之三》</a></p>\n<p>[4] <a href=\"https://stackoverflow.com/questions/16005952/opengl-gradient-banding-artifacts\">OpenGL gradient “banding” artifacts</a></p>\n<p>[5] <a href=\"http://momentsingraphics.de/BlueNoise.html\">Free blue noise textures</a></p>\n<p>[6] <a href=\"https://baike.baidu.com/item/%E6%9C%89%E8%89%B2%E5%99%AA%E5%A3%B0\">有色噪声_百度百科</a></p>\n<p>[7] <a href=\"https://www.bilibili.com/video/BV1k4411J7Fi\">AD/DA 破解数字信号的玄学 Digital Show and Tell</a></p>\n<h1 id=\"附录-代码\">附录: 代码</h1>\n<p>这部分内容是拆开来的, 需要把相关的部分拼起来运行. 顺带一提图片是用Image.save保存的.</p>\n<ol type=\"1\">\n<li>图是用pillow画的</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL.ImageFilter <span class=\"keyword\">import</span> GaussianBlur</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n<ol start=\"2\" type=\"1\">\n<li>Bayer矩阵定义</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BAYER_DITHER_MATRIX = [</span><br><span class=\"line\">     <span class=\"number\">0</span>, <span class=\"number\">48</span>, <span class=\"number\">12</span>, <span class=\"number\">60</span>,  <span class=\"number\">3</span>, <span class=\"number\">51</span>, <span class=\"number\">15</span>, <span class=\"number\">63</span>,</span><br><span class=\"line\">    <span class=\"number\">32</span>, <span class=\"number\">16</span>, <span class=\"number\">44</span>, <span class=\"number\">28</span>, <span class=\"number\">35</span>, <span class=\"number\">19</span>, <span class=\"number\">47</span>, <span class=\"number\">31</span>,</span><br><span class=\"line\">     <span class=\"number\">8</span>, <span class=\"number\">56</span>,  <span class=\"number\">4</span>, <span class=\"number\">52</span>, <span class=\"number\">11</span>, <span class=\"number\">59</span>,  <span class=\"number\">7</span>, <span class=\"number\">55</span>,</span><br><span class=\"line\">    <span class=\"number\">40</span>, <span class=\"number\">24</span>, <span class=\"number\">36</span>, <span class=\"number\">20</span>, <span class=\"number\">43</span>, <span class=\"number\">27</span>, <span class=\"number\">39</span>, <span class=\"number\">23</span>,</span><br><span class=\"line\">     <span class=\"number\">2</span>, <span class=\"number\">50</span>, <span class=\"number\">14</span>, <span class=\"number\">62</span>,  <span class=\"number\">1</span>, <span class=\"number\">49</span>, <span class=\"number\">13</span>, <span class=\"number\">61</span>,</span><br><span class=\"line\">    <span class=\"number\">34</span>, <span class=\"number\">18</span>, <span class=\"number\">46</span>, <span class=\"number\">30</span>, <span class=\"number\">33</span>, <span class=\"number\">17</span>, <span class=\"number\">45</span>, <span class=\"number\">29</span>,</span><br><span class=\"line\">    <span class=\"number\">10</span>, <span class=\"number\">58</span>,  <span class=\"number\">6</span>, <span class=\"number\">54</span>,  <span class=\"number\">9</span>, <span class=\"number\">57</span>,  <span class=\"number\">5</span>, <span class=\"number\">53</span>,</span><br><span class=\"line\">    <span class=\"number\">42</span>, <span class=\"number\">26</span>, <span class=\"number\">38</span>, <span class=\"number\">22</span>, <span class=\"number\">41</span>, <span class=\"number\">25</span>, <span class=\"number\">37</span>, <span class=\"number\">21</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dither</span>(<span class=\"params\">x, y</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BAYER_DITHER_MATRIX[(x % <span class=\"number\">8</span>) * <span class=\"number\">8</span> + (y % <span class=\"number\">8</span>)]</span><br></pre></td></tr></table></figure>\n<ol start=\"3\" type=\"1\">\n<li>白噪声抖动(原图/高斯模糊)与Bayer有序抖动附图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img_white = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">img_bayer = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">512</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">        c0 = i * <span class=\"number\">256</span> / <span class=\"number\">512</span>  <span class=\"comment\"># expected color</span></span><br><span class=\"line\">        mask = <span class=\"built_in\">int</span>(random.random() * <span class=\"number\">255</span>)</span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> c0 &lt;= mask <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        img_white.putpixel((i, j), (c, c, c))</span><br><span class=\"line\">        mask = get_dither(i, j) * <span class=\"number\">4</span></span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> c0 &lt;= mask <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        img_bayer.putpixel((i, j), (c, c, c))</span><br><span class=\"line\"></span><br><span class=\"line\">img_blurred = img_white.<span class=\"built_in\">filter</span>(GaussianBlur(radius=<span class=\"number\">3</span>))</span><br><span class=\"line\">img_white.show()</span><br><span class=\"line\">img_blurred.show()</span><br><span class=\"line\">img_bayer.show()</span><br></pre></td></tr></table></figure>\n<ol start=\"4\" type=\"1\">\n<li>Floyd-Steinberg抖动算法附图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">512</span>, <span class=\"number\">256</span>))</span><br><span class=\"line\">src = [[(i + j) / <span class=\"number\">2</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):  <span class=\"comment\"># column</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):  <span class=\"comment\"># row</span></span><br><span class=\"line\">        <span class=\"comment\"># left side of original image</span></span><br><span class=\"line\">        c0 = (i + j) / <span class=\"number\">2</span></span><br><span class=\"line\">        img.putpixel((i, j), (c0, c0, c0))</span><br><span class=\"line\">        <span class=\"comment\"># right side of dithered image</span></span><br><span class=\"line\">        c = <span class=\"number\">0</span> <span class=\"keyword\">if</span> src[i][j] &lt; <span class=\"number\">127.5</span> <span class=\"keyword\">else</span> <span class=\"number\">255</span></span><br><span class=\"line\">        e = src[i][j] - c1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i+<span class=\"number\">1</span>][j] += e * <span class=\"number\">0.375</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i][j+<span class=\"number\">1</span>] += e * <span class=\"number\">0.375</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src) <span class=\"keyword\">and</span> j + <span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(src):</span><br><span class=\"line\">            src[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] += e * <span class=\"number\">0.25</span></span><br><span class=\"line\">        img.putpixel((i + <span class=\"number\">256</span>, j), (c, c, c))</span><br><span class=\"line\"></span><br><span class=\"line\">img.show()</span><br></pre></td></tr></table></figure>\n<ol start=\"5\" type=\"1\">\n<li>DitherFade Shader附图(代码类型随便选了个glsl, 为了语法高亮)</li>\n</ol>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shader &quot;Test/DitherFade&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Properties</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _Color (&quot;Color&quot;, Color) = (1,1,1,1)</span><br><span class=\"line\">        _MainTex (&quot;Albedo (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class=\"line\">        _Glossiness (&quot;Smoothness&quot;, Range(0,1)) = 0.5</span><br><span class=\"line\">        _Metallic (&quot;Metallic&quot;, Range(0,1)) = 0.0</span><br><span class=\"line\">        _BeginFade (&quot;Begin Fade Distance&quot;, Float) = 0.0</span><br><span class=\"line\">        _EndFade (&quot;End Fade Distance&quot;, Float) = 1.0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SubShader</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Tags &#123; &quot;RenderType&quot;=&quot;Opaque&quot; &#125;</span><br><span class=\"line\">        LOD <span class=\"number\">200</span></span><br><span class=\"line\">        CGPROGRAM</span><br><span class=\"line\">        <span class=\"meta\">#pragma surface surf Standard fullforwardshadows vertex:vert</span></span><br><span class=\"line\">        <span class=\"meta\">#pragma target 4.0</span></span><br><span class=\"line\">        struct Input</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fixed2 uv_MainTex;</span><br><span class=\"line\">            fixed <span class=\"built_in\">distance</span>;</span><br><span class=\"line\">            fixed4 screenPosition;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">sampler2D</span> _MainTex;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> half _Glossiness;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> half _Metallic;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> fixed4 _Color;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">float</span> _BeginFade;</span><br><span class=\"line\">        <span class=\"keyword\">uniform</span> <span class=\"type\">float</span> _EndFade;</span><br><span class=\"line\">        inline <span class=\"type\">float</span> DitherMatrix(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"type\">float</span> dm[ <span class=\"number\">64</span> ] = &#123;</span><br><span class=\"line\">                 <span class=\"number\">1</span>, <span class=\"number\">49</span>, <span class=\"number\">13</span>, <span class=\"number\">61</span>,  <span class=\"number\">4</span>, <span class=\"number\">52</span>, <span class=\"number\">16</span>, <span class=\"number\">64</span>,</span><br><span class=\"line\">                <span class=\"number\">33</span>, <span class=\"number\">17</span>, <span class=\"number\">45</span>, <span class=\"number\">29</span>, <span class=\"number\">36</span>, <span class=\"number\">20</span>, <span class=\"number\">48</span>, <span class=\"number\">32</span>,</span><br><span class=\"line\">                 <span class=\"number\">9</span>, <span class=\"number\">57</span>,  <span class=\"number\">5</span>, <span class=\"number\">53</span>, <span class=\"number\">12</span>, <span class=\"number\">60</span>,  <span class=\"number\">8</span>, <span class=\"number\">56</span>,</span><br><span class=\"line\">                <span class=\"number\">41</span>, <span class=\"number\">25</span>, <span class=\"number\">37</span>, <span class=\"number\">21</span>, <span class=\"number\">44</span>, <span class=\"number\">28</span>, <span class=\"number\">40</span>, <span class=\"number\">24</span>,</span><br><span class=\"line\">                 <span class=\"number\">3</span>, <span class=\"number\">51</span>, <span class=\"number\">15</span>, <span class=\"number\">63</span>,  <span class=\"number\">2</span>, <span class=\"number\">50</span>, <span class=\"number\">14</span>, <span class=\"number\">62</span>,</span><br><span class=\"line\">                <span class=\"number\">35</span>, <span class=\"number\">19</span>, <span class=\"number\">47</span>, <span class=\"number\">31</span>, <span class=\"number\">34</span>, <span class=\"number\">18</span>, <span class=\"number\">46</span>, <span class=\"number\">30</span>,</span><br><span class=\"line\">                <span class=\"number\">11</span>, <span class=\"number\">59</span>,  <span class=\"number\">7</span>, <span class=\"number\">55</span>, <span class=\"number\">10</span>, <span class=\"number\">58</span>,  <span class=\"number\">6</span>, <span class=\"number\">54</span>,</span><br><span class=\"line\">                <span class=\"number\">43</span>, <span class=\"number\">27</span>, <span class=\"number\">39</span>, <span class=\"number\">23</span>, <span class=\"number\">42</span>, <span class=\"number\">26</span>, <span class=\"number\">38</span>, <span class=\"number\">22</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dm[y * <span class=\"number\">8</span> + x] / <span class=\"number\">64</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">void</span> vert(<span class=\"keyword\">inout</span> appdata_full v, <span class=\"keyword\">out</span> Input o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UNITY_INITIALIZE_OUTPUT(Input, o);</span><br><span class=\"line\">            o.<span class=\"built_in\">distance</span> = -UnityObjectToViewPos(v.vertex).z;</span><br><span class=\"line\">            o.screenPosition = ComputeScreenPos(UnityObjectToClipPos(v.vertex));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">void</span> surf(Input i, <span class=\"keyword\">inout</span> SurfaceOutputStandard o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fixed4 c = tex2D(_MainTex, i.uv_MainTex) * _Color;</span><br><span class=\"line\">            o.Albedo = c.rgb;</span><br><span class=\"line\">            o.Metallic = _Metallic;</span><br><span class=\"line\">            o.Smoothness = _Glossiness;</span><br><span class=\"line\">            o.Alpha = c.a;</span><br><span class=\"line\">            float4 sp = i.screenPosition / i.screenPosition.w;</span><br><span class=\"line\">            sp.xy = sp.xy * _ScreenParams.xy;</span><br><span class=\"line\">            <span class=\"type\">float</span> msk = DitherMatrix(fmod(sp.x, <span class=\"number\">8</span>), fmod(sp.y, <span class=\"number\">8</span>));</span><br><span class=\"line\">            clip((i.<span class=\"built_in\">distance</span> - _ProjectionParams.y - _BeginFade) / (_ProjectionParams.y + _EndFade) - msk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ENDCG</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FallBack &quot;Diffuse&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello, 博客!","date":"2020-11-04T02:11:20.000Z","_content":"\n# 天气不错, 摸了\n\n今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.\n\n考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.\n\n但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.\n\n","source":"_posts/hello.md","raw":"---\ntitle: Hello, 博客!\ndate: 2020-11-04 10:11:20\n---\n\n# 天气不错, 摸了\n\n今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.\n\n考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.\n\n但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.\n\n","slug":"hello","published":1,"updated":"2021-09-24T04:06:44.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq670006lmfy86hee30d","content":"<h1 id=\"天气不错-摸了\">天气不错, 摸了</h1>\n<p>今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.</p>\n<p>考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.</p>\n<p>但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"天气不错-摸了\">天气不错, 摸了</h1>\n<p>今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.</p>\n<p>考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.</p>\n<p>但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.</p>\n"},{"title":"Python中的import","date":"2020-12-14T02:26:52.000Z","_content":"\n前段时间由于本蒟蒻才疏学浅, 写出来的服务器被ImportError填满, 于是腾了个时间出来整理下python中import相关的内容, 希望能够对看到这里的同学有些帮助. 其实多数内容都是抄自Python官方文档, 文中相关位置都给出了链接, 其中的内容真的非常详细, 给力! 这个问题本身非常简单, 现有如下所示两个文件:\n\n```python\n# a.py\nimport b\nx = 1\n\n# b.py\nfrom a import x\n```\n\n然后在python交互环境中敲```import a```就会得到一个```ImportError: cannot import name x```. 表面上看上去由于a中引入了b, b又反过来引入a导致了循环引用, 下面就来考虑下怎么解决这个问题.\n\n---\n\n### 1. import相关概念\n\nimport操作大致可以分为两种, 其内部实现均直接或间接使用了__import__方法:\n\n* import module\n* from module import name\n\n参考[这份文档](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#the-import-statement), 其定义如下所示:\n\n```\nimport_stmt     ::=  \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                     | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                     (\",\" identifier [\"as\" identifier])*\n                     | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                     (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                     | \"from\" module \"import\" \"*\"\nmodule          ::=  (identifier \".\")* identifier\nrelative_module ::=  \".\"* module | \".\"+\n```\n\n我不喜欢原文列出的繁琐步骤, 这里大概概括下:\n\n对于```import module```的方式, 首先查找模块, 进行加载并初始化模块, 并在局部命名空间中定义相对应的名称; 而对于```from module import name```的方式, 在加载并初始化模块完成后, 会去检查每个需要引入的符号是否存在, 如果没有则去查找子模块, 如果存在则在局部命名空间中定义相应名称, 否则抛出异常.\n\n也就是说后者相对前者多了一步对于目标模块是否包含要引入的标识符的判断, 也就是说如果引入的时候目标模块中没有包含对应符号就GG了.\n\n聪明的小伙伴已经发现问题了, 在上面的例子中我们定义```x```的位置在```import b```后面, 所以执行到```from a import x```的时候a中还没有```x```这个变量. 但是为何第二次到达```from a import x```时没有将```a.py```执行一次呢? 以及这个变量是保存在哪里以供import进行检测的呢? 这就需要进一步深入了解.\n\n---\n\n### 2. import导入过程\n\n上面的流程中, 有一步“加载并初始化模块”, 参考[这个文档](https://docs.python.org/zh-cn/3/reference/import.html#loading), 其过程应大致为:\n\n1. 先通过查找器(*finder*)根据给定的路径查找文件位置, 在3.4之前的python中, 查找器将直接返回一个加载器(*loader*), 后来会返回一个模块规格说明(*module spec*)是一个包含有模块引入相关信息的封装\n2. 如果有加载器的话使用该加载器创建一个模块对象, 否则直接实例化一个模块对象\n3. 模块说明中如果不包含加载器, 但是提供了一个查找路径, 那么它是一个名字空间模块(*namespace module*), 否则不支持引入并raise一个异常\n4. 无论名字空间模块还是普通模块, 先将模块对象加入sys.modules, 然后对于普通模块会去执行模块代码, 如果执行过程中出错再把模块对象从sys.modules中移除 (这里实际上有个特例, 就是对于模块说明中没有指明如何执行模块的情况, 但是原文的伪代码我没看懂)\n\n注意如果模块已经存在于sys.modules中, 导入操作会直接将其返回, 此外导入过程会先将模块加入sys.modules以防止导入过程发生不停的循环, 这也就是为什么重复引入的时候代码没有被重复执行.\n\n---\n\n### 3. 可行的方法\n\n通过上面的内容我们已经可以了解到, 一个模块只要被引用过, 无论import语句写在哪里其实都无需担心其代码会被重复执行, 因为会直接返回sys.modules中保存的对象, 并不会真的重新执行一遍, 除非用imp.reload这种方法强制重新载入.\n\n* **可以不用```from module import name```的方式引入, 使用```import module```**\n\n所有地方都用绝对引入的方式直接引入模块, 这样就不会在引入过程中检查标识符是否存在, 如果最终标识符不存在的话则会在运行中抛出异常, 而且可以避免下面会列出来的一个引入标识符的问题.\n\n但是这样做的缺点在于, 如果工程目录结构较为复杂, 绝对引入会导致代码又臭又长, 想象一下所有的函数调用都变成```rootdir.module.sub_module.function_name()```, 那简直惨不忍睹.\n\n* **可以在函数内, 或者模块底部调用```from module import name```**\n\n这个方法我不太喜欢, 虽然不会导致模块重复载入, 但是可读性降低了, 在[pep8](https://www.python.org/dev/peps/pep-0008/#imports)和[flake8](https://www.flake8rules.com/rules/E402.html)中都有指出引入操作应当位于模块开始的地方, 并以标准库、相关三方库、本地应用程序或库的顺序进行引入.\n\n* **合并代码, 或者重构以合理拆分代码, 将公共部分写入独立的模块**\n\n这个方法可以解决多数问题, 但是要改的地方不少, 而且多数情况下需要具体问题具体分析, 并不能一劳永逸.\n\n比方说我们游戏有这样一个逻辑, 登录时需要从登录模块调用任务模块以更新每日任务数据. 当时设计跨天重置逻辑时为了节约存储、保证数据一致性, 判断两次请求跨天只用了用户数据中保存的一个时间戳. 但是有时跨天用户并不会退出游戏, 而此时访问任务数据要求能够触发整个跨天重置的逻辑, 于是这俩互相调用导致引入不成功.\n\n最后在这一点上的处理是考虑模块中会优先加载```__init__.py```的逻辑, 代码(大概)长这样:\n\n```python\n# game/__init__.py\nimport game.login\nimport game.quest\n\n# game/login.py\nimport time\nfrom game.config import BASE_TIME  # 某个周一的零点, 用来判断跨天、跨周\nfrom game.quest import refresh_quest\ndef check_new_day(user):\n    last = (user.lastactive - BASE_TIME) % 86400\n    today = int(time.time() - BASE_TIME) % 86400\n    if last != today:\n        quest_refresh(user)  # 跨天时刷新任务\n\n# game/quest\nimport game.login\ndef quest_data(user):  # 获取数据时检查是否需要跨天刷新\n    game.login.check_new_day(user)\n\ndef quest_refresh(user):\n    pass\n```\n\n**(捂脸.jpg)上面的方法都没能简单轻松地解决这个问题, 但是我已经是黔驴技穷了, 如果有什么好的方法还请务必告诉我, 感激不尽.**\n\n---\n\n### 4. 其他收获\n\n* **一个问题**\n\n上面有提到import找到目标标识符之后会在局部命名空间中定义相应的名称, 这会导致一个问题, 比如现在有:\n\n```python\n# config.py\nCONNECTION_POOL_SIZE = 25\n\n# manager.py\nfrom config import CONNECTION_POOL_SIZE\ndef build():\n    pool = ConnectionPool(size=CONNECTION_POOL_SIZE)  # 假设有这样一个类\n\n# main.py\nimport config\nimport manager\nconfig.CONNECTION_POOL_SIZE = 3\nmanager.build()  # 最终得到的pool大小为25\n```\n\n这样在执行```main.py```时可以正常修改```config.py```中的连接池大小配置, 但是没能修改```manager.py```中的变量大小, 因为在其中使用```from```进行引入时等同于将变量拷贝到其本地空间一份, 而非常不巧的是这个变量使用了值传递的方式.\n\n这同时意味着如果要引入的变量是通过引用传递的, 那么通过这两个方法得到的结果是一样的, 但我感觉避免误导, 尽量还是不要用这种方式引入配置.\n\n* **一个规则**\n\n在学习import相关内容的过程中了解到的关于是否使用pyc文件加速引入的规则, 以下内容摘抄自[这个文档](https://docs.python.org/zh-cn/3/reference/import.html#cached-bytecode-invalidation).\n\n> 默认情况下, Python 通过在所写入缓存文件中保存源文件的最新修改时间戳和大小来实现这一点. 在运行时, 导入系统会通过比对缓存文件中保存的元数据和源文件的元数据确定该缓存的有效性.\n> 在 3.7 版更改: 增加了基于哈希的 .pyc 文件. 在此之前, Python 只支持基于时间戳来确定字节码缓存的有效性.\n\n<font color=#EEE>这次重新排了个版, 是因为发现使用过长的标题会导致右侧的导航栏非常难看, 汗.</font>\n","source":"_posts/python_import.md","raw":"---\ntitle: Python中的import\ndate: 2020-12-14 10:26:52\n---\n\n前段时间由于本蒟蒻才疏学浅, 写出来的服务器被ImportError填满, 于是腾了个时间出来整理下python中import相关的内容, 希望能够对看到这里的同学有些帮助. 其实多数内容都是抄自Python官方文档, 文中相关位置都给出了链接, 其中的内容真的非常详细, 给力! 这个问题本身非常简单, 现有如下所示两个文件:\n\n```python\n# a.py\nimport b\nx = 1\n\n# b.py\nfrom a import x\n```\n\n然后在python交互环境中敲```import a```就会得到一个```ImportError: cannot import name x```. 表面上看上去由于a中引入了b, b又反过来引入a导致了循环引用, 下面就来考虑下怎么解决这个问题.\n\n---\n\n### 1. import相关概念\n\nimport操作大致可以分为两种, 其内部实现均直接或间接使用了__import__方法:\n\n* import module\n* from module import name\n\n参考[这份文档](https://docs.python.org/zh-cn/3/reference/simple_stmts.html#the-import-statement), 其定义如下所示:\n\n```\nimport_stmt     ::=  \"import\" module [\"as\" identifier] (\",\" module [\"as\" identifier])*\n                     | \"from\" relative_module \"import\" identifier [\"as\" identifier]\n                     (\",\" identifier [\"as\" identifier])*\n                     | \"from\" relative_module \"import\" \"(\" identifier [\"as\" identifier]\n                     (\",\" identifier [\"as\" identifier])* [\",\"] \")\"\n                     | \"from\" module \"import\" \"*\"\nmodule          ::=  (identifier \".\")* identifier\nrelative_module ::=  \".\"* module | \".\"+\n```\n\n我不喜欢原文列出的繁琐步骤, 这里大概概括下:\n\n对于```import module```的方式, 首先查找模块, 进行加载并初始化模块, 并在局部命名空间中定义相对应的名称; 而对于```from module import name```的方式, 在加载并初始化模块完成后, 会去检查每个需要引入的符号是否存在, 如果没有则去查找子模块, 如果存在则在局部命名空间中定义相应名称, 否则抛出异常.\n\n也就是说后者相对前者多了一步对于目标模块是否包含要引入的标识符的判断, 也就是说如果引入的时候目标模块中没有包含对应符号就GG了.\n\n聪明的小伙伴已经发现问题了, 在上面的例子中我们定义```x```的位置在```import b```后面, 所以执行到```from a import x```的时候a中还没有```x```这个变量. 但是为何第二次到达```from a import x```时没有将```a.py```执行一次呢? 以及这个变量是保存在哪里以供import进行检测的呢? 这就需要进一步深入了解.\n\n---\n\n### 2. import导入过程\n\n上面的流程中, 有一步“加载并初始化模块”, 参考[这个文档](https://docs.python.org/zh-cn/3/reference/import.html#loading), 其过程应大致为:\n\n1. 先通过查找器(*finder*)根据给定的路径查找文件位置, 在3.4之前的python中, 查找器将直接返回一个加载器(*loader*), 后来会返回一个模块规格说明(*module spec*)是一个包含有模块引入相关信息的封装\n2. 如果有加载器的话使用该加载器创建一个模块对象, 否则直接实例化一个模块对象\n3. 模块说明中如果不包含加载器, 但是提供了一个查找路径, 那么它是一个名字空间模块(*namespace module*), 否则不支持引入并raise一个异常\n4. 无论名字空间模块还是普通模块, 先将模块对象加入sys.modules, 然后对于普通模块会去执行模块代码, 如果执行过程中出错再把模块对象从sys.modules中移除 (这里实际上有个特例, 就是对于模块说明中没有指明如何执行模块的情况, 但是原文的伪代码我没看懂)\n\n注意如果模块已经存在于sys.modules中, 导入操作会直接将其返回, 此外导入过程会先将模块加入sys.modules以防止导入过程发生不停的循环, 这也就是为什么重复引入的时候代码没有被重复执行.\n\n---\n\n### 3. 可行的方法\n\n通过上面的内容我们已经可以了解到, 一个模块只要被引用过, 无论import语句写在哪里其实都无需担心其代码会被重复执行, 因为会直接返回sys.modules中保存的对象, 并不会真的重新执行一遍, 除非用imp.reload这种方法强制重新载入.\n\n* **可以不用```from module import name```的方式引入, 使用```import module```**\n\n所有地方都用绝对引入的方式直接引入模块, 这样就不会在引入过程中检查标识符是否存在, 如果最终标识符不存在的话则会在运行中抛出异常, 而且可以避免下面会列出来的一个引入标识符的问题.\n\n但是这样做的缺点在于, 如果工程目录结构较为复杂, 绝对引入会导致代码又臭又长, 想象一下所有的函数调用都变成```rootdir.module.sub_module.function_name()```, 那简直惨不忍睹.\n\n* **可以在函数内, 或者模块底部调用```from module import name```**\n\n这个方法我不太喜欢, 虽然不会导致模块重复载入, 但是可读性降低了, 在[pep8](https://www.python.org/dev/peps/pep-0008/#imports)和[flake8](https://www.flake8rules.com/rules/E402.html)中都有指出引入操作应当位于模块开始的地方, 并以标准库、相关三方库、本地应用程序或库的顺序进行引入.\n\n* **合并代码, 或者重构以合理拆分代码, 将公共部分写入独立的模块**\n\n这个方法可以解决多数问题, 但是要改的地方不少, 而且多数情况下需要具体问题具体分析, 并不能一劳永逸.\n\n比方说我们游戏有这样一个逻辑, 登录时需要从登录模块调用任务模块以更新每日任务数据. 当时设计跨天重置逻辑时为了节约存储、保证数据一致性, 判断两次请求跨天只用了用户数据中保存的一个时间戳. 但是有时跨天用户并不会退出游戏, 而此时访问任务数据要求能够触发整个跨天重置的逻辑, 于是这俩互相调用导致引入不成功.\n\n最后在这一点上的处理是考虑模块中会优先加载```__init__.py```的逻辑, 代码(大概)长这样:\n\n```python\n# game/__init__.py\nimport game.login\nimport game.quest\n\n# game/login.py\nimport time\nfrom game.config import BASE_TIME  # 某个周一的零点, 用来判断跨天、跨周\nfrom game.quest import refresh_quest\ndef check_new_day(user):\n    last = (user.lastactive - BASE_TIME) % 86400\n    today = int(time.time() - BASE_TIME) % 86400\n    if last != today:\n        quest_refresh(user)  # 跨天时刷新任务\n\n# game/quest\nimport game.login\ndef quest_data(user):  # 获取数据时检查是否需要跨天刷新\n    game.login.check_new_day(user)\n\ndef quest_refresh(user):\n    pass\n```\n\n**(捂脸.jpg)上面的方法都没能简单轻松地解决这个问题, 但是我已经是黔驴技穷了, 如果有什么好的方法还请务必告诉我, 感激不尽.**\n\n---\n\n### 4. 其他收获\n\n* **一个问题**\n\n上面有提到import找到目标标识符之后会在局部命名空间中定义相应的名称, 这会导致一个问题, 比如现在有:\n\n```python\n# config.py\nCONNECTION_POOL_SIZE = 25\n\n# manager.py\nfrom config import CONNECTION_POOL_SIZE\ndef build():\n    pool = ConnectionPool(size=CONNECTION_POOL_SIZE)  # 假设有这样一个类\n\n# main.py\nimport config\nimport manager\nconfig.CONNECTION_POOL_SIZE = 3\nmanager.build()  # 最终得到的pool大小为25\n```\n\n这样在执行```main.py```时可以正常修改```config.py```中的连接池大小配置, 但是没能修改```manager.py```中的变量大小, 因为在其中使用```from```进行引入时等同于将变量拷贝到其本地空间一份, 而非常不巧的是这个变量使用了值传递的方式.\n\n这同时意味着如果要引入的变量是通过引用传递的, 那么通过这两个方法得到的结果是一样的, 但我感觉避免误导, 尽量还是不要用这种方式引入配置.\n\n* **一个规则**\n\n在学习import相关内容的过程中了解到的关于是否使用pyc文件加速引入的规则, 以下内容摘抄自[这个文档](https://docs.python.org/zh-cn/3/reference/import.html#cached-bytecode-invalidation).\n\n> 默认情况下, Python 通过在所写入缓存文件中保存源文件的最新修改时间戳和大小来实现这一点. 在运行时, 导入系统会通过比对缓存文件中保存的元数据和源文件的元数据确定该缓存的有效性.\n> 在 3.7 版更改: 增加了基于哈希的 .pyc 文件. 在此之前, Python 只支持基于时间戳来确定字节码缓存的有效性.\n\n<font color=#EEE>这次重新排了个版, 是因为发现使用过长的标题会导致右侧的导航栏非常难看, 汗.</font>\n","slug":"python_import","published":1,"updated":"2021-09-24T04:11:06.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq680007lmfycefv0oqg","content":"<p>前段时间由于本蒟蒻才疏学浅, 写出来的服务器被ImportError填满, 于是腾了个时间出来整理下python中import相关的内容, 希望能够对看到这里的同学有些帮助. 其实多数内容都是抄自Python官方文档, 文中相关位置都给出了链接, 其中的内容真的非常详细, 给力! 这个问题本身非常简单, 现有如下所示两个文件:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b</span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># b.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> x</span><br></pre></td></tr></table></figure>\n<p>然后在python交互环境中敲<code>import a</code>就会得到一个<code>ImportError: cannot import name x</code>. 表面上看上去由于a中引入了b, b又反过来引入a导致了循环引用, 下面就来考虑下怎么解决这个问题.</p>\n<hr>\n<h3 id=\"import相关概念\">1. import相关概念</h3>\n<p>import操作大致可以分为两种, 其内部实现均直接或间接使用了__import__方法:</p>\n<ul>\n<li>import module</li>\n<li>from module import name</li>\n</ul>\n<p>参考<a href=\"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#the-import-statement\">这份文档</a>, 其定义如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import_stmt     ::&#x3D;  &quot;import&quot; module [&quot;as&quot; identifier] (&quot;,&quot; module [&quot;as&quot; identifier])*</span><br><span class=\"line\">                     | &quot;from&quot; relative_module &quot;import&quot; identifier [&quot;as&quot; identifier]</span><br><span class=\"line\">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])*</span><br><span class=\"line\">                     | &quot;from&quot; relative_module &quot;import&quot; &quot;(&quot; identifier [&quot;as&quot; identifier]</span><br><span class=\"line\">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])* [&quot;,&quot;] &quot;)&quot;</span><br><span class=\"line\">                     | &quot;from&quot; module &quot;import&quot; &quot;*&quot;</span><br><span class=\"line\">module          ::&#x3D;  (identifier &quot;.&quot;)* identifier</span><br><span class=\"line\">relative_module ::&#x3D;  &quot;.&quot;* module | &quot;.&quot;+</span><br></pre></td></tr></table></figure>\n<p>我不喜欢原文列出的繁琐步骤, 这里大概概括下:</p>\n<p>对于<code>import module</code>的方式, 首先查找模块, 进行加载并初始化模块, 并在局部命名空间中定义相对应的名称; 而对于<code>from module import name</code>的方式, 在加载并初始化模块完成后, 会去检查每个需要引入的符号是否存在, 如果没有则去查找子模块, 如果存在则在局部命名空间中定义相应名称, 否则抛出异常.</p>\n<p>也就是说后者相对前者多了一步对于目标模块是否包含要引入的标识符的判断, 也就是说如果引入的时候目标模块中没有包含对应符号就GG了.</p>\n<p>聪明的小伙伴已经发现问题了, 在上面的例子中我们定义<code>x</code>的位置在<code>import b</code>后面, 所以执行到<code>from a import x</code>的时候a中还没有<code>x</code>这个变量. 但是为何第二次到达<code>from a import x</code>时没有将<code>a.py</code>执行一次呢? 以及这个变量是保存在哪里以供import进行检测的呢? 这就需要进一步深入了解.</p>\n<hr>\n<h3 id=\"import导入过程\">2. import导入过程</h3>\n<p>上面的流程中, 有一步“加载并初始化模块”, 参考<a href=\"https://docs.python.org/zh-cn/3/reference/import.html#loading\">这个文档</a>, 其过程应大致为:</p>\n<ol type=\"1\">\n<li>先通过查找器(<em>finder</em>)根据给定的路径查找文件位置, 在3.4之前的python中, 查找器将直接返回一个加载器(<em>loader</em>), 后来会返回一个模块规格说明(<em>module spec</em>)是一个包含有模块引入相关信息的封装</li>\n<li>如果有加载器的话使用该加载器创建一个模块对象, 否则直接实例化一个模块对象</li>\n<li>模块说明中如果不包含加载器, 但是提供了一个查找路径, 那么它是一个名字空间模块(<em>namespace module</em>), 否则不支持引入并raise一个异常</li>\n<li>无论名字空间模块还是普通模块, 先将模块对象加入sys.modules, 然后对于普通模块会去执行模块代码, 如果执行过程中出错再把模块对象从sys.modules中移除 (这里实际上有个特例, 就是对于模块说明中没有指明如何执行模块的情况, 但是原文的伪代码我没看懂)</li>\n</ol>\n<p>注意如果模块已经存在于sys.modules中, 导入操作会直接将其返回, 此外导入过程会先将模块加入sys.modules以防止导入过程发生不停的循环, 这也就是为什么重复引入的时候代码没有被重复执行.</p>\n<hr>\n<h3 id=\"可行的方法\">3. 可行的方法</h3>\n<p>通过上面的内容我们已经可以了解到, 一个模块只要被引用过, 无论import语句写在哪里其实都无需担心其代码会被重复执行, 因为会直接返回sys.modules中保存的对象, 并不会真的重新执行一遍, 除非用imp.reload这种方法强制重新载入.</p>\n<ul>\n<li><strong>可以不用<code>from module import name</code>的方式引入, 使用<code>import module</code></strong></li>\n</ul>\n<p>所有地方都用绝对引入的方式直接引入模块, 这样就不会在引入过程中检查标识符是否存在, 如果最终标识符不存在的话则会在运行中抛出异常, 而且可以避免下面会列出来的一个引入标识符的问题.</p>\n<p>但是这样做的缺点在于, 如果工程目录结构较为复杂, 绝对引入会导致代码又臭又长, 想象一下所有的函数调用都变成<code>rootdir.module.sub_module.function_name()</code>, 那简直惨不忍睹.</p>\n<ul>\n<li><strong>可以在函数内, 或者模块底部调用<code>from module import name</code></strong></li>\n</ul>\n<p>这个方法我不太喜欢, 虽然不会导致模块重复载入, 但是可读性降低了, 在<a href=\"https://www.python.org/dev/peps/pep-0008/#imports\">pep8</a>和<a href=\"https://www.flake8rules.com/rules/E402.html\">flake8</a>中都有指出引入操作应当位于模块开始的地方, 并以标准库、相关三方库、本地应用程序或库的顺序进行引入.</p>\n<ul>\n<li><strong>合并代码, 或者重构以合理拆分代码, 将公共部分写入独立的模块</strong></li>\n</ul>\n<p>这个方法可以解决多数问题, 但是要改的地方不少, 而且多数情况下需要具体问题具体分析, 并不能一劳永逸.</p>\n<p>比方说我们游戏有这样一个逻辑, 登录时需要从登录模块调用任务模块以更新每日任务数据. 当时设计跨天重置逻辑时为了节约存储、保证数据一致性, 判断两次请求跨天只用了用户数据中保存的一个时间戳. 但是有时跨天用户并不会退出游戏, 而此时访问任务数据要求能够触发整个跨天重置的逻辑, 于是这俩互相调用导致引入不成功.</p>\n<p>最后在这一点上的处理是考虑模块中会优先加载<code>__init__.py</code>的逻辑, 代码(大概)长这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># game/__init__.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> game.login</span><br><span class=\"line\"><span class=\"keyword\">import</span> game.quest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># game/login.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> game.config <span class=\"keyword\">import</span> BASE_TIME  <span class=\"comment\"># 某个周一的零点, 用来判断跨天、跨周</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> game.quest <span class=\"keyword\">import</span> refresh_quest</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_new_day</span>(<span class=\"params\">user</span>):</span></span><br><span class=\"line\">    last = (user.lastactive - BASE_TIME) % <span class=\"number\">86400</span></span><br><span class=\"line\">    today = <span class=\"built_in\">int</span>(time.time() - BASE_TIME) % <span class=\"number\">86400</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> last != today:</span><br><span class=\"line\">        quest_refresh(user)  <span class=\"comment\"># 跨天时刷新任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># game/quest</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> game.login</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quest_data</span>(<span class=\"params\">user</span>):</span>  <span class=\"comment\"># 获取数据时检查是否需要跨天刷新</span></span><br><span class=\"line\">    game.login.check_new_day(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quest_refresh</span>(<span class=\"params\">user</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>(捂脸.jpg)上面的方法都没能简单轻松地解决这个问题, 但是我已经是黔驴技穷了, 如果有什么好的方法还请务必告诉我, 感激不尽.</strong></p>\n<hr>\n<h3 id=\"其他收获\">4. 其他收获</h3>\n<ul>\n<li><strong>一个问题</strong></li>\n</ul>\n<p>上面有提到import找到目标标识符之后会在局部命名空间中定义相应的名称, 这会导致一个问题, 比如现在有:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\">CONNECTION_POOL_SIZE = <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># manager.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> CONNECTION_POOL_SIZE</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>():</span></span><br><span class=\"line\">    pool = ConnectionPool(size=CONNECTION_POOL_SIZE)  <span class=\"comment\"># 假设有这样一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">import</span> manager</span><br><span class=\"line\">config.CONNECTION_POOL_SIZE = <span class=\"number\">3</span></span><br><span class=\"line\">manager.build()  <span class=\"comment\"># 最终得到的pool大小为25</span></span><br></pre></td></tr></table></figure>\n<p>这样在执行<code>main.py</code>时可以正常修改<code>config.py</code>中的连接池大小配置, 但是没能修改<code>manager.py</code>中的变量大小, 因为在其中使用<code>from</code>进行引入时等同于将变量拷贝到其本地空间一份, 而非常不巧的是这个变量使用了值传递的方式.</p>\n<p>这同时意味着如果要引入的变量是通过引用传递的, 那么通过这两个方法得到的结果是一样的, 但我感觉避免误导, 尽量还是不要用这种方式引入配置.</p>\n<ul>\n<li><strong>一个规则</strong></li>\n</ul>\n<p>在学习import相关内容的过程中了解到的关于是否使用pyc文件加速引入的规则, 以下内容摘抄自<a href=\"https://docs.python.org/zh-cn/3/reference/import.html#cached-bytecode-invalidation\">这个文档</a>.</p>\n<blockquote>\n<p>默认情况下, Python 通过在所写入缓存文件中保存源文件的最新修改时间戳和大小来实现这一点. 在运行时, 导入系统会通过比对缓存文件中保存的元数据和源文件的元数据确定该缓存的有效性. 在 3.7 版更改: 增加了基于哈希的 .pyc 文件. 在此之前, Python 只支持基于时间戳来确定字节码缓存的有效性.</p>\n</blockquote>\n<p><font color=\"#EEE\">这次重新排了个版, 是因为发现使用过长的标题会导致右侧的导航栏非常难看, 汗.</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间由于本蒟蒻才疏学浅, 写出来的服务器被ImportError填满, 于是腾了个时间出来整理下python中import相关的内容, 希望能够对看到这里的同学有些帮助. 其实多数内容都是抄自Python官方文档, 文中相关位置都给出了链接, 其中的内容真的非常详细, 给力! 这个问题本身非常简单, 现有如下所示两个文件:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># a.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b</span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># b.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> a <span class=\"keyword\">import</span> x</span><br></pre></td></tr></table></figure>\n<p>然后在python交互环境中敲<code>import a</code>就会得到一个<code>ImportError: cannot import name x</code>. 表面上看上去由于a中引入了b, b又反过来引入a导致了循环引用, 下面就来考虑下怎么解决这个问题.</p>\n<hr>\n<h3 id=\"import相关概念\">1. import相关概念</h3>\n<p>import操作大致可以分为两种, 其内部实现均直接或间接使用了__import__方法:</p>\n<ul>\n<li>import module</li>\n<li>from module import name</li>\n</ul>\n<p>参考<a href=\"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#the-import-statement\">这份文档</a>, 其定义如下所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import_stmt     ::&#x3D;  &quot;import&quot; module [&quot;as&quot; identifier] (&quot;,&quot; module [&quot;as&quot; identifier])*</span><br><span class=\"line\">                     | &quot;from&quot; relative_module &quot;import&quot; identifier [&quot;as&quot; identifier]</span><br><span class=\"line\">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])*</span><br><span class=\"line\">                     | &quot;from&quot; relative_module &quot;import&quot; &quot;(&quot; identifier [&quot;as&quot; identifier]</span><br><span class=\"line\">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])* [&quot;,&quot;] &quot;)&quot;</span><br><span class=\"line\">                     | &quot;from&quot; module &quot;import&quot; &quot;*&quot;</span><br><span class=\"line\">module          ::&#x3D;  (identifier &quot;.&quot;)* identifier</span><br><span class=\"line\">relative_module ::&#x3D;  &quot;.&quot;* module | &quot;.&quot;+</span><br></pre></td></tr></table></figure>\n<p>我不喜欢原文列出的繁琐步骤, 这里大概概括下:</p>\n<p>对于<code>import module</code>的方式, 首先查找模块, 进行加载并初始化模块, 并在局部命名空间中定义相对应的名称; 而对于<code>from module import name</code>的方式, 在加载并初始化模块完成后, 会去检查每个需要引入的符号是否存在, 如果没有则去查找子模块, 如果存在则在局部命名空间中定义相应名称, 否则抛出异常.</p>\n<p>也就是说后者相对前者多了一步对于目标模块是否包含要引入的标识符的判断, 也就是说如果引入的时候目标模块中没有包含对应符号就GG了.</p>\n<p>聪明的小伙伴已经发现问题了, 在上面的例子中我们定义<code>x</code>的位置在<code>import b</code>后面, 所以执行到<code>from a import x</code>的时候a中还没有<code>x</code>这个变量. 但是为何第二次到达<code>from a import x</code>时没有将<code>a.py</code>执行一次呢? 以及这个变量是保存在哪里以供import进行检测的呢? 这就需要进一步深入了解.</p>\n<hr>\n<h3 id=\"import导入过程\">2. import导入过程</h3>\n<p>上面的流程中, 有一步“加载并初始化模块”, 参考<a href=\"https://docs.python.org/zh-cn/3/reference/import.html#loading\">这个文档</a>, 其过程应大致为:</p>\n<ol type=\"1\">\n<li>先通过查找器(<em>finder</em>)根据给定的路径查找文件位置, 在3.4之前的python中, 查找器将直接返回一个加载器(<em>loader</em>), 后来会返回一个模块规格说明(<em>module spec</em>)是一个包含有模块引入相关信息的封装</li>\n<li>如果有加载器的话使用该加载器创建一个模块对象, 否则直接实例化一个模块对象</li>\n<li>模块说明中如果不包含加载器, 但是提供了一个查找路径, 那么它是一个名字空间模块(<em>namespace module</em>), 否则不支持引入并raise一个异常</li>\n<li>无论名字空间模块还是普通模块, 先将模块对象加入sys.modules, 然后对于普通模块会去执行模块代码, 如果执行过程中出错再把模块对象从sys.modules中移除 (这里实际上有个特例, 就是对于模块说明中没有指明如何执行模块的情况, 但是原文的伪代码我没看懂)</li>\n</ol>\n<p>注意如果模块已经存在于sys.modules中, 导入操作会直接将其返回, 此外导入过程会先将模块加入sys.modules以防止导入过程发生不停的循环, 这也就是为什么重复引入的时候代码没有被重复执行.</p>\n<hr>\n<h3 id=\"可行的方法\">3. 可行的方法</h3>\n<p>通过上面的内容我们已经可以了解到, 一个模块只要被引用过, 无论import语句写在哪里其实都无需担心其代码会被重复执行, 因为会直接返回sys.modules中保存的对象, 并不会真的重新执行一遍, 除非用imp.reload这种方法强制重新载入.</p>\n<ul>\n<li><strong>可以不用<code>from module import name</code>的方式引入, 使用<code>import module</code></strong></li>\n</ul>\n<p>所有地方都用绝对引入的方式直接引入模块, 这样就不会在引入过程中检查标识符是否存在, 如果最终标识符不存在的话则会在运行中抛出异常, 而且可以避免下面会列出来的一个引入标识符的问题.</p>\n<p>但是这样做的缺点在于, 如果工程目录结构较为复杂, 绝对引入会导致代码又臭又长, 想象一下所有的函数调用都变成<code>rootdir.module.sub_module.function_name()</code>, 那简直惨不忍睹.</p>\n<ul>\n<li><strong>可以在函数内, 或者模块底部调用<code>from module import name</code></strong></li>\n</ul>\n<p>这个方法我不太喜欢, 虽然不会导致模块重复载入, 但是可读性降低了, 在<a href=\"https://www.python.org/dev/peps/pep-0008/#imports\">pep8</a>和<a href=\"https://www.flake8rules.com/rules/E402.html\">flake8</a>中都有指出引入操作应当位于模块开始的地方, 并以标准库、相关三方库、本地应用程序或库的顺序进行引入.</p>\n<ul>\n<li><strong>合并代码, 或者重构以合理拆分代码, 将公共部分写入独立的模块</strong></li>\n</ul>\n<p>这个方法可以解决多数问题, 但是要改的地方不少, 而且多数情况下需要具体问题具体分析, 并不能一劳永逸.</p>\n<p>比方说我们游戏有这样一个逻辑, 登录时需要从登录模块调用任务模块以更新每日任务数据. 当时设计跨天重置逻辑时为了节约存储、保证数据一致性, 判断两次请求跨天只用了用户数据中保存的一个时间戳. 但是有时跨天用户并不会退出游戏, 而此时访问任务数据要求能够触发整个跨天重置的逻辑, 于是这俩互相调用导致引入不成功.</p>\n<p>最后在这一点上的处理是考虑模块中会优先加载<code>__init__.py</code>的逻辑, 代码(大概)长这样:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># game/__init__.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> game.login</span><br><span class=\"line\"><span class=\"keyword\">import</span> game.quest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># game/login.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> game.config <span class=\"keyword\">import</span> BASE_TIME  <span class=\"comment\"># 某个周一的零点, 用来判断跨天、跨周</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> game.quest <span class=\"keyword\">import</span> refresh_quest</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_new_day</span>(<span class=\"params\">user</span>):</span></span><br><span class=\"line\">    last = (user.lastactive - BASE_TIME) % <span class=\"number\">86400</span></span><br><span class=\"line\">    today = <span class=\"built_in\">int</span>(time.time() - BASE_TIME) % <span class=\"number\">86400</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> last != today:</span><br><span class=\"line\">        quest_refresh(user)  <span class=\"comment\"># 跨天时刷新任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># game/quest</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> game.login</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quest_data</span>(<span class=\"params\">user</span>):</span>  <span class=\"comment\"># 获取数据时检查是否需要跨天刷新</span></span><br><span class=\"line\">    game.login.check_new_day(user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quest_refresh</span>(<span class=\"params\">user</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>(捂脸.jpg)上面的方法都没能简单轻松地解决这个问题, 但是我已经是黔驴技穷了, 如果有什么好的方法还请务必告诉我, 感激不尽.</strong></p>\n<hr>\n<h3 id=\"其他收获\">4. 其他收获</h3>\n<ul>\n<li><strong>一个问题</strong></li>\n</ul>\n<p>上面有提到import找到目标标识符之后会在局部命名空间中定义相应的名称, 这会导致一个问题, 比如现在有:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.py</span></span><br><span class=\"line\">CONNECTION_POOL_SIZE = <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># manager.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> CONNECTION_POOL_SIZE</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>():</span></span><br><span class=\"line\">    pool = ConnectionPool(size=CONNECTION_POOL_SIZE)  <span class=\"comment\"># 假设有这样一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">import</span> manager</span><br><span class=\"line\">config.CONNECTION_POOL_SIZE = <span class=\"number\">3</span></span><br><span class=\"line\">manager.build()  <span class=\"comment\"># 最终得到的pool大小为25</span></span><br></pre></td></tr></table></figure>\n<p>这样在执行<code>main.py</code>时可以正常修改<code>config.py</code>中的连接池大小配置, 但是没能修改<code>manager.py</code>中的变量大小, 因为在其中使用<code>from</code>进行引入时等同于将变量拷贝到其本地空间一份, 而非常不巧的是这个变量使用了值传递的方式.</p>\n<p>这同时意味着如果要引入的变量是通过引用传递的, 那么通过这两个方法得到的结果是一样的, 但我感觉避免误导, 尽量还是不要用这种方式引入配置.</p>\n<ul>\n<li><strong>一个规则</strong></li>\n</ul>\n<p>在学习import相关内容的过程中了解到的关于是否使用pyc文件加速引入的规则, 以下内容摘抄自<a href=\"https://docs.python.org/zh-cn/3/reference/import.html#cached-bytecode-invalidation\">这个文档</a>.</p>\n<blockquote>\n<p>默认情况下, Python 通过在所写入缓存文件中保存源文件的最新修改时间戳和大小来实现这一点. 在运行时, 导入系统会通过比对缓存文件中保存的元数据和源文件的元数据确定该缓存的有效性. 在 3.7 版更改: 增加了基于哈希的 .pyc 文件. 在此之前, Python 只支持基于时间戳来确定字节码缓存的有效性.</p>\n</blockquote>\n<p><font color=\"#EEE\">这次重新排了个版, 是因为发现使用过长的标题会导致右侧的导航栏非常难看, 汗.</font></p>\n"},{"title":"test","mathjax":true,"toc":false,"date":"2021-09-24T07:32:10.000Z","_content":"![test image](https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png)\n","source":"_posts/test.md","raw":"---\ntitle: test\nmathjax: true\ntoc: false\ndate: 2021-09-24 15:32:10\n---\n![test image](https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png)\n","slug":"test","published":1,"updated":"2021-09-24T07:32:48.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckty1tq690009lmfyb6b4famp","content":"<p><img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png\" alt=\"test image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png\" alt=\"test image\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/ditherfade/dither_example_0.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_0.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_example_1.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_1.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_example_2.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_2.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_example_3.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_3.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_example_4.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_4.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_example_5.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_example_5.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/dither_fade_result.png","post":"ckty1tq650005lmfygigr56ap","slug":"dither_fade_result.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/equation_0.png","post":"ckty1tq650005lmfygigr56ap","slug":"equation_0.png","modified":1,"renderable":1},{"_id":"source/_posts/ditherfade/equation_1.png","post":"ckty1tq650005lmfygigr56ap","slug":"equation_1.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckty1tq5y0001lmfyb1uvdli4","category_id":"ckty1tq640004lmfy6qp6gm4o","_id":"ckty1tq6a000almfy66lz8d7n"},{"post_id":"ckty1tq650005lmfygigr56ap","category_id":"ckty1tq680008lmfygmyk6h1y","_id":"ckty1tq6a000blmfy0t92cibq"}],"PostTag":[],"Tag":[]}}