{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/plane.ico","path":"assets/plane.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka02.png","path":"avatar/Misaka02.png","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka03.png","path":"avatar/Misaka03.png","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/debuggable.md","hash":"1b1d70f5ab20d8df910852e44a215923f09ce411","modified":1606375713808},{"_id":"source/_posts/Cocos2dx_4.x_project_makeup.md","hash":"5e2ec8857bce08aea4be30e6cdb86a39f998347f","modified":1606209510414},{"_id":"source/_posts/hello.md","hash":"1ed6fa0c23d5ea1c452b26cbc9fe46b3c82e9067","modified":1604455880112},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604406557740},{"_id":"themes/archer/.gitignore","hash":"3c75d7681ccc4edd053107bee5a8c58607fb036d","modified":1604406578451},{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1604406578469},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1604406575880},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1604406578483},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1604406578497},{"_id":"themes/archer/README.md","hash":"a3ba929435da6adbed7b03657f84b69ab37cfe33","modified":1604406557540},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1604406578513},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1604406575738},{"_id":"themes/archer/_config.yml","hash":"7530223710f0facb37e989f35b72fb5496d234b3","modified":1604458520768},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1604406561566},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1604406575719},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1604406578411},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1604406578397},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1604406561534},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1604406575772},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1604406575756},{"_id":"themes/archer/layout/index.ejs","hash":"3194a741fdc93f93a299222d9cda9b99088639bc","modified":1604406557563},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1604406558095},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1604406558067},{"_id":"themes/archer/layout/post.ejs","hash":"9f886450a99eae3a8e1af78560ec6e72cefc36ca","modified":1604406558082},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1604406558022},{"_id":"themes/archer/source/.DS_Store","hash":"0e6c5764efdf998000c999bb67a7085c8c826bdf","modified":1604407583855},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1604406558039},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1604406578430},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1604406545371},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1604406575835},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1604406575849},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1604406575811},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1604406557780},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1604406557855},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1604406557582},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1604406557843},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"5e6276242a8bd3f76b35d93393c95e58b7884840","modified":1604406557607},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1604406557594},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1604406557830},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1604406557815},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1604406557621},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1604406557869},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1604406546783},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1604406546826},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1604406546843},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1604406546799},{"_id":"themes/archer/source/assets/plane.ico","hash":"11f707a227a9d56f19cdbbce553dc3d017abbda1","modified":1604409359620},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1604406554054},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1604406554804},{"_id":"themes/archer/source/css/style.css","hash":"8e41748502e35784a242c3f11d758fece302f77c","modified":1604406555411},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1604406555483},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1604406556954},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1604406554113},{"_id":"themes/archer/source/scripts/search.js","hash":"127c388b575c2cb0a850b32c08dd61d6a6f690ba","modified":1604406545411},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1604406558279},{"_id":"themes/archer/source/scripts/share.js","hash":"419c5e6e202fc899411d36e24cf453b48af8aef7","modified":1604406545834},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1604406558247},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1604406558178},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1604406558231},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1604406558359},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1604406558135},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1604406558165},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1604406558451},{"_id":"themes/archer/src/js/sidebar.js","hash":"0900c4a368687f882ba0559419b23357c534c403","modified":1604406558150},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1604406558421},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1604406558387},{"_id":"themes/archer/src/js/tag.js","hash":"4916f913c28943f857a0fcfdd191e24628f9193b","modified":1604406558205},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1604406559294},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1604406558321},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1604406559187},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1604406559267},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1604406559323},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1604406559220},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"809196ba5e91d4ba00477dd3e9768bd384dc9c9a","modified":1604406557701},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1604406558510},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1604406557731},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"031401489f3487b13fafcb17eea7c877f2f3b98f","modified":1604406557758},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"cc41ba5da413cf39b809e7defb360b0d8fafc6f3","modified":1604406557689},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1604406557714},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1604406557644},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1604406557995},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1604406557671},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1604406557922},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1604406557657},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1604406557894},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1604406557950},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1604406558943},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1604406557937},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1604406557965},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1604406558911},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1604406558557},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1604406558787},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1604406558995},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1604406558860},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1604406558720},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"412b17cfac52e12751d248a704e5eb139e937bc4","modified":1604406558822},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1604406558751},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1604406558686},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1604406558620},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"93cc82cb56663e83e90fbd6fe31ffdd38e694f3b","modified":1604406559055},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1604406559088},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1604406559126},{"_id":"themes/archer/source/avatar/Misaka03.png","hash":"a457bbba80b6e4ab431b9dbb065537256408d10c","modified":1604407476165},{"_id":"themes/archer/source/avatar/Misaka02.png","hash":"32585cf5532cf2e2616ff20b8fd46723a84be64b","modified":1604407262927},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1604406557459},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1604406556001},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1604406556914},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1604406547752},{"_id":"themes/archer/source/scripts/main.js","hash":"2cfe993eb1579e8aebf73b00d699b25be07981fa","modified":1604406546747},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1604406554767},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1604406553998},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1604406552274},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1604406561504},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1604406578380},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1604406550251},{"_id":"public/content.json","hash":"0df4ef3710f6273a92ced9ae68414db74eb3945a","modified":1606375791196},{"_id":"public/20201126/debuggable/index.html","hash":"5fa008a27b4ecca7159d58f5b1048d6bd9ec16d1","modified":1606375791196},{"_id":"public/20201124/Cocos2dx_4.x_project_makeup/index.html","hash":"1ad82930614a5f4cb3309f10efe54f99c3610a37","modified":1606375791196},{"_id":"public/20201104/hello/index.html","hash":"f8e7a406343bfe22846a7c777e329f6ab823069d","modified":1606375791196},{"_id":"public/archives/index.html","hash":"4217795a28a4e373023820234275436f5e6e9118","modified":1606375791196},{"_id":"public/archives/2020/index.html","hash":"714078532a8353f74f3782306f95cac9d891fbd7","modified":1606375791196},{"_id":"public/archives/2020/11/index.html","hash":"bf055294c614b895504c38a3e51b36fe9d2b0b1f","modified":1606375791196},{"_id":"public/index.html","hash":"021d7ed02577042d000554fc43459e80a9be02d6","modified":1606375791196},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1606375791196},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1606375791196},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1606375791196},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1606375791196},{"_id":"public/assets/plane.ico","hash":"11f707a227a9d56f19cdbbce553dc3d017abbda1","modified":1606375791196},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1606375791196},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1606375791196},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1606375791196},{"_id":"public/avatar/Misaka02.png","hash":"32585cf5532cf2e2616ff20b8fd46723a84be64b","modified":1606375791196},{"_id":"public/avatar/Misaka03.png","hash":"a457bbba80b6e4ab431b9dbb065537256408d10c","modified":1606375791196},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1606375791196},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1606375791196},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1606375791196},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1606375791196},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1606375791196},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1606375791196},{"_id":"public/scripts/search.js","hash":"127c388b575c2cb0a850b32c08dd61d6a6f690ba","modified":1606375791196},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1606375791196},{"_id":"public/css/style.css","hash":"8e41748502e35784a242c3f11d758fece302f77c","modified":1606375791196},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1606375791196},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1606375791196},{"_id":"public/scripts/share.js","hash":"419c5e6e202fc899411d36e24cf453b48af8aef7","modified":1606375791196},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1606375791196},{"_id":"public/scripts/main.js","hash":"2cfe993eb1579e8aebf73b00d699b25be07981fa","modified":1606375791196}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Cocos2dx 4.x 项目工程构建","_content":"\nCocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.\n\n首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.\n\n----\n\n# Windows上构建Visual Studio项目\n\n先创建个目录用来装项目工程(powershell)\n\n```shell\nmkdir win32-build && cd win32-build;\n```\n\n然后用cmake进行构建\n\n```shell\ncmake .. -G \"Visual Studio 16 2019\" -Tv141 -A win32 ..\n```\n\n上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)\n\n```shell\n-G \"Visual Studio 9 2008\"\n-G \"Visual Studio 10 2010\"\n-G \"Visual Studio 11 2012\"\n-G \"Visual Studio 12 2013\"\n-G \"Visual Studio 14 2015\"\n-G \"Visual Studio 15 2017\"\n-G \"Visual Studio 16 2019\"\n```\n\n然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如\n\n```shell\n-A Win32\n-A x64\n-A ARM\n-A ARM64\n```\n\n运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:\n\n```log\n14>已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.\n```\n\n往上看找到具体报错, 发现是个python脚本运行失败了.\n\n```log\n14>sync_folder.py: error: argument -l: expected one argument\n```\n\n这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考[这篇帖子](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952), 其中指出:\n\n> 这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。\n\n原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", default=None)\n```\n\n将其修改为:\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", nargs=\"?\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", nargs=\"?\", default=None)\n```\n\n再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).\n\n----\n\n# Mac上构建Xcode项目\n\n同样的, 首先找个地方创建项目工程\n\n```shell\nmkdir ios_mac-build && cd ios_mac-build;\ncmake .. -G \"Xcode\"\n```\n\n不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:\n\n```log\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_C_COMPILER could be found.\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_CXX_COMPILER could be found.\n-- Configuring incomplete, errors occurred!\n```\n\n首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:\n\n```shell\nsudo xcode-select --reset\nsudo xcode-select --switch /Applications/Xcode.app\n```\n\n但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:\n\n```shell\nbrew upgrade cmake\n```\n\n完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.\n\n### 参考\n\n[关于cocos2dx 4.0 cmake编译的一些坑](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952)\n\n[Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)](https://blog.csdn.net/hunter_wyh/article/details/104377872)\n\n","source":"_posts/Cocos2dx_4.x_project_makeup.md","raw":"---\ntitle: Cocos2dx 4.x 项目工程构建\n---\n\nCocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.\n\n首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.\n\n----\n\n# Windows上构建Visual Studio项目\n\n先创建个目录用来装项目工程(powershell)\n\n```shell\nmkdir win32-build && cd win32-build;\n```\n\n然后用cmake进行构建\n\n```shell\ncmake .. -G \"Visual Studio 16 2019\" -Tv141 -A win32 ..\n```\n\n上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)\n\n```shell\n-G \"Visual Studio 9 2008\"\n-G \"Visual Studio 10 2010\"\n-G \"Visual Studio 11 2012\"\n-G \"Visual Studio 12 2013\"\n-G \"Visual Studio 14 2015\"\n-G \"Visual Studio 15 2017\"\n-G \"Visual Studio 16 2019\"\n```\n\n然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如\n\n```shell\n-A Win32\n-A x64\n-A ARM\n-A ARM64\n```\n\n运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:\n\n```log\n14>已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.\n```\n\n往上看找到具体报错, 发现是个python脚本运行失败了.\n\n```log\n14>sync_folder.py: error: argument -l: expected one argument\n```\n\n这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考[这篇帖子](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952), 其中指出:\n\n> 这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。\n\n原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", default=None)\n```\n\n将其修改为:\n\n```python\nparser.add_argument(\"-l\", dest=\"luajit\", nargs=\"?\", default=None)\nparser.add_argument(\"-m\", dest=\"mode\", nargs=\"?\", default=None)\n```\n\n再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).\n\n----\n\n# Mac上构建Xcode项目\n\n同样的, 首先找个地方创建项目工程\n\n```shell\nmkdir ios_mac-build && cd ios_mac-build;\ncmake .. -G \"Xcode\"\n```\n\n不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:\n\n```log\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_C_COMPILER could be found.\nCMake Error at CMakeLists.txt:28 (project):\n    No CMAKE_CXX_COMPILER could be found.\n-- Configuring incomplete, errors occurred!\n```\n\n首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:\n\n```shell\nsudo xcode-select --reset\nsudo xcode-select --switch /Applications/Xcode.app\n```\n\n但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:\n\n```shell\nbrew upgrade cmake\n```\n\n完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.\n\n### 参考\n\n[关于cocos2dx 4.0 cmake编译的一些坑](https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952)\n\n[Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)](https://blog.csdn.net/hunter_wyh/article/details/104377872)\n\n","slug":"Cocos2dx_4.x_project_makeup","published":1,"date":"2020-11-24T09:17:00.809Z","updated":"2020-11-24T09:18:30.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhyinp7y000057cmaih7bfz4","content":"<p>Cocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.</p>\n<p>首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.</p>\n<hr>\n<h1 id=\"Windows上构建Visual-Studio项目\"><a href=\"#Windows上构建Visual-Studio项目\" class=\"headerlink\" title=\"Windows上构建Visual Studio项目\"></a>Windows上构建Visual Studio项目</h1><p>先创建个目录用来装项目工程(powershell)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir win32-build &amp;&amp; cd win32-build;</span><br></pre></td></tr></table></figure>\n\n<p>然后用cmake进行构建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .. -G &quot;Visual Studio 16 2019&quot; -Tv141 -A win32 ..</span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-G &quot;Visual Studio 9 2008&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 10 2010&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 11 2012&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 12 2013&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 14 2015&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 15 2017&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 16 2019&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A Win32</span><br><span class=\"line\">-A x64</span><br><span class=\"line\">-A ARM</span><br><span class=\"line\">-A ARM64</span><br></pre></td></tr></table></figure>\n\n<p>运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.</span><br></pre></td></tr></table></figure>\n\n<p>往上看找到具体报错, 发现是个python脚本运行失败了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;sync_folder.py: error: argument -l: expected one argument</span><br></pre></td></tr></table></figure>\n\n<p>这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考<a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">这篇帖子</a>, 其中指出:</p>\n<blockquote>\n<p>这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。</p>\n</blockquote>\n<p>原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将其修改为:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).</p>\n<hr>\n<h1 id=\"Mac上构建Xcode项目\"><a href=\"#Mac上构建Xcode项目\" class=\"headerlink\" title=\"Mac上构建Xcode项目\"></a>Mac上构建Xcode项目</h1><p>同样的, 首先找个地方创建项目工程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ios_mac-build &amp;&amp; cd ios_mac-build;</span><br><span class=\"line\">cmake .. -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_C_COMPILER could be found.</span><br><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_CXX_COMPILER could be found.</span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n\n<p>首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select --reset</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>\n\n<p>但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade cmake</span><br></pre></td></tr></table></figure>\n\n<p>完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">关于cocos2dx 4.0 cmake编译的一些坑</a></p>\n<p><a href=\"https://blog.csdn.net/hunter_wyh/article/details/104377872\">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Cocos2dx从4.0版本开始改用cmake, 删掉了原有的各个平台的工程文件, 但是没关系, 为了愉快地使用IDE进行编译, 可以使用cmake来构建工程文件供IDE使用.</p>\n<p>首先这篇文章中的项目文件是cocos new生成的, 前面的过程全部略过了, 从new得到的目录开始进行项目构建. 其次这里用的项目是个lua项目, 但是实际上都一样, 没有区别的.</p>\n<hr>\n<h1 id=\"Windows上构建Visual-Studio项目\"><a href=\"#Windows上构建Visual-Studio项目\" class=\"headerlink\" title=\"Windows上构建Visual Studio项目\"></a>Windows上构建Visual Studio项目</h1><p>先创建个目录用来装项目工程(powershell)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir win32-build &amp;&amp; cd win32-build;</span><br></pre></td></tr></table></figure>\n\n<p>然后用cmake进行构建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake .. -G &quot;Visual Studio 16 2019&quot; -Tv141 -A win32 ..</span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令的-G参数要看咱用的是什么IDE, 比如: (8之前的官方文档上写着removed, 可能是不支持了)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-G &quot;Visual Studio 9 2008&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 10 2010&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 11 2012&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 12 2013&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 14 2015&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 15 2017&quot;</span><br><span class=\"line\">-G &quot;Visual Studio 16 2019&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后-A参数指定编译的目标平台, 也就是要看咱运行的环境(原文叫target platform, architecture), 比如</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-A Win32</span><br><span class=\"line\">-A x64</span><br><span class=\"line\">-A ARM</span><br><span class=\"line\">-A ARM64</span><br></pre></td></tr></table></figure>\n\n<p>运行成功之后在win32-build路径下会生成对应的解决方案项目文件, 直接用VS打开即可. 接下来就可以尝试编译运行了, 我这个版本会报一个链接错误, 找日志看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;已完成生成项目“COPY_LUA-xxx.vcxproj”的操作 - 失败.</span><br></pre></td></tr></table></figure>\n\n<p>往上看找到具体报错, 发现是个python脚本运行失败了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14&gt;sync_folder.py: error: argument -l: expected one argument</span><br></pre></td></tr></table></figure>\n\n<p>这个sync_folder是4.0新增的一个用来同步res和src的脚本, 参考<a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">这篇帖子</a>, 其中指出:</p>\n<blockquote>\n<p>这个bug在于当前的写法并非支持无参选项。会让vs报错就不能直接启动项目。</p>\n</blockquote>\n<p>原本不打算修改sync_folder.py中的内容, 但当我尝试使用python2.7和python3.8去运行这个脚本, 全都报出了相同的错误, 我才确定不是python版本的问题. 因此直接选择修改调用处的参数, 同文章中所讲的, 找到</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将其修改为:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-l&quot;</span>, dest=<span class=\"string\">&quot;luajit&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&quot;-m&quot;</span>, dest=<span class=\"string\">&quot;mode&quot;</span>, nargs=<span class=\"string\">&quot;?&quot;</span>, default=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再编译即可, 注意选择启动项目, 我当时选错了半天没启动起来, 会提示找不到目标(捂脸).</p>\n<hr>\n<h1 id=\"Mac上构建Xcode项目\"><a href=\"#Mac上构建Xcode项目\" class=\"headerlink\" title=\"Mac上构建Xcode项目\"></a>Mac上构建Xcode项目</h1><p>同样的, 首先找个地方创建项目工程</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ios_mac-build &amp;&amp; cd ios_mac-build;</span><br><span class=\"line\">cmake .. -G &quot;Xcode&quot;</span><br></pre></td></tr></table></figure>\n\n<p>不出预料报错了, 提示“No CMAKE_C_COMPILER could be found.”, 不知道是不是最近换了Xcode12导致的. 具体报错内容大概长这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_C_COMPILER could be found.</span><br><span class=\"line\">CMake Error at CMakeLists.txt:28 (project):</span><br><span class=\"line\">    No CMAKE_CXX_COMPILER could be found.</span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure>\n\n<p>首先我尝试在google上搜索, 得出两个解决方案, 有遇到这个问题的小伙伴可以先尝试下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select --reset</span><br><span class=\"line\">sudo xcode-select --switch /Applications/Xcode.app</span><br></pre></td></tr></table></figure>\n\n<p>但是在我的问题中并没能正常工作, 于是我想到可能是cmake版本过旧, 或者cmake的配置在更新Xcode之后没有自动调整, 于是我尝试更新cmake:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade cmake</span><br></pre></td></tr></table></figure>\n\n<p>完事儿以后就能够正常构建项目工程了. 跑完之后用xcode直接打开生成的xcodeproj即可编译运行. 和Windows环境一样, 记得选编译目标哦, 就在运行按钮的右侧.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://forum.cocos.org/t/cocos2dx-4-0-cmake/86952\">关于cocos2dx 4.0 cmake编译的一些坑</a></p>\n<p><a href=\"https://blog.csdn.net/hunter_wyh/article/details/104377872\">Cocos2dx-v4.0学习-使用CMake编译Cocos2d-4.0 (For Visual Studio)</a></p>\n"},{"title":"尝试改AndroidManifest并添加Debuggable","_content":"\n# 尝试改AndroidManifest并添加Debuggable\n\n最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:\n\n* 可以通过反编译再回编译的方式修改AndroidManifest.xml\n\n* 或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml\n\n* 再或者直接上Magisk, 开启全局可调式.\n\n第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个[参考链接](https://blog.csdn.net/yhsnihao/article/details/106760666), 暂且搁置. 这里在Mac上尝试下前两个方法.\n\n<font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font>\n\n----\n\n# 反编译+回编译\n\n**注意**: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.\n\n### 1. 装个apktool先\n\n[下载地址](https://ibotpeaches.github.io/Apktool/install/)内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.\n\n### 2. 拆开\n\n```shell\napktool d com.hello.apk\n```\n\n成功后会在当前目录下生成一个和包同名的目录.\n\n### 3. 修改AndroidManifest.xml\n\n找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.\n\n```xml\n<applicaion android:debuggable=\"true\">\n```\n\n### 4. 打包\n\n```shell\napktool b com.hello.apk/\n```\n\n成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.\n\n### 5. 生成一个keystore\n\n如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).\n\n```shell\nkeytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore\n```\n\n过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.\n\n### 6. 重新签名\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore\n```\n\n过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:\n\n```log\n>>> 签名者\n    X.509, CN=..., OU=..., O=..., L=..., ST=..., C=...\n    [可信证书]\n\njar 已签名。\n\n警告:\n签名者证书为自签名证书。\n```\n\n至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.\n\n----\n\n# 使用AXMLEditor修改AndroidManifest\n\n但是某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.\n\n### 1. 装个AXMLEditor先\n\n```shell\ngit clone git@github.com:fourbrother/AXMLEditor.git\n```\n\n啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.\n\n### 2. 解压 & 修改\n\n首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了\n\n```shell\nunzip -n -d com.hello com.hello.apk\n```\n\n可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.\n\n```shell\njava -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml\n```\n\n这里顺带提一下, 看工具源码中[这个位置](https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151)对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.\n\n最后用输出的文件覆盖原本的输入文件:\n\n```shell\nmv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml\n```\n\n### 3. 压缩 & 二次签名\n\n这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.\n\n**重要**: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.\n\n这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:\n\n```shell\ncd com.hello/\nrm -rf META-INF\nzip -r ../com.hello_new.apk ./\ncd ..\n```\n\n然后是同样的签名过程, 创建keystore请去上面的内容找:\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore\n```\n\n到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.\n\n<font color=\"#EEE\">撒, 开始快乐的截帧吧. </font>\n\n---\n\n### 参考&感谢\n\n[【Android测试工具】03. ApkTool在Mac上的安装和使用](https://blog.csdn.net/wirelessqa/article/details/8997168)\n\n[关于keystore的简单介绍](https://blog.csdn.net/zlh313_01/article/details/82424664)\n\n[Android 8.0 以上开启全局可调式](https://blog.csdn.net/yhsnihao/article/details/106760666)\n\n[Android中利用AXMLEditor工具不进行反编译就篡改apk文件](http://www.wjdiankong.cn/archives/1036)\n","source":"_posts/debuggable.md","raw":"---\ntitle: 尝试改AndroidManifest并添加Debuggable\n---\n\n# 尝试改AndroidManifest并添加Debuggable\n\n最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:\n\n* 可以通过反编译再回编译的方式修改AndroidManifest.xml\n\n* 或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml\n\n* 再或者直接上Magisk, 开启全局可调式.\n\n第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个[参考链接](https://blog.csdn.net/yhsnihao/article/details/106760666), 暂且搁置. 这里在Mac上尝试下前两个方法.\n\n<font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font>\n\n----\n\n# 反编译+回编译\n\n**注意**: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.\n\n### 1. 装个apktool先\n\n[下载地址](https://ibotpeaches.github.io/Apktool/install/)内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.\n\n### 2. 拆开\n\n```shell\napktool d com.hello.apk\n```\n\n成功后会在当前目录下生成一个和包同名的目录.\n\n### 3. 修改AndroidManifest.xml\n\n找到applicaion, 在属性中修改android:debuggable=\"true\", 如果没有这个属性手动添加就可以了.\n\n```xml\n<applicaion android:debuggable=\"true\">\n```\n\n### 4. 打包\n\n```shell\napktool b com.hello.apk/\n```\n\n成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.\n\n### 5. 生成一个keystore\n\n如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).\n\n```shell\nkeytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore\n```\n\n过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.\n\n### 6. 重新签名\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore\n```\n\n过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:\n\n```log\n>>> 签名者\n    X.509, CN=..., OU=..., O=..., L=..., ST=..., C=...\n    [可信证书]\n\njar 已签名。\n\n警告:\n签名者证书为自签名证书。\n```\n\n至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.\n\n----\n\n# 使用AXMLEditor修改AndroidManifest\n\n但是某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.\n\n### 1. 装个AXMLEditor先\n\n```shell\ngit clone git@github.com:fourbrother/AXMLEditor.git\n```\n\n啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.\n\n### 2. 解压 & 修改\n\n首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了\n\n```shell\nunzip -n -d com.hello com.hello.apk\n```\n\n可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.\n\n```shell\njava -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml\n```\n\n这里顺带提一下, 看工具源码中[这个位置](https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151)对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.\n\n最后用输出的文件覆盖原本的输入文件:\n\n```shell\nmv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml\n```\n\n### 3. 压缩 & 二次签名\n\n这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.\n\n**重要**: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.\n\n这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:\n\n```shell\ncd com.hello/\nrm -rf META-INF\nzip -r ../com.hello_new.apk ./\ncd ..\n```\n\n然后是同样的签名过程, 创建keystore请去上面的内容找:\n\n```shell\njarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore\n```\n\n到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.\n\n<font color=\"#EEE\">撒, 开始快乐的截帧吧. </font>\n\n---\n\n### 参考&感谢\n\n[【Android测试工具】03. ApkTool在Mac上的安装和使用](https://blog.csdn.net/wirelessqa/article/details/8997168)\n\n[关于keystore的简单介绍](https://blog.csdn.net/zlh313_01/article/details/82424664)\n\n[Android 8.0 以上开启全局可调式](https://blog.csdn.net/yhsnihao/article/details/106760666)\n\n[Android中利用AXMLEditor工具不进行反编译就篡改apk文件](http://www.wjdiankong.cn/archives/1036)\n","slug":"debuggable","published":1,"date":"2020-11-26T02:51:51.730Z","updated":"2020-11-26T07:28:33.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhyinp85000157cm2gc39hjq","content":"<h1 id=\"尝试改AndroidManifest并添加Debuggable\"><a href=\"#尝试改AndroidManifest并添加Debuggable\" class=\"headerlink\" title=\"尝试改AndroidManifest并添加Debuggable\"></a>尝试改AndroidManifest并添加Debuggable</h1><p>最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:</p>\n<ul>\n<li><p>可以通过反编译再回编译的方式修改AndroidManifest.xml</p>\n</li>\n<li><p>或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml</p>\n</li>\n<li><p>再或者直接上Magisk, 开启全局可调式.</p>\n</li>\n</ul>\n<p>第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个<a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">参考链接</a>, 暂且搁置. 这里在Mac上尝试下前两个方法.</p>\n<p><font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font></p>\n<hr>\n<h1 id=\"反编译-回编译\"><a href=\"#反编译-回编译\" class=\"headerlink\" title=\"反编译+回编译\"></a>反编译+回编译</h1><p><strong>注意</strong>: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.</p>\n<h3 id=\"1-装个apktool先\"><a href=\"#1-装个apktool先\" class=\"headerlink\" title=\"1. 装个apktool先\"></a>1. 装个apktool先</h3><p><a href=\"https://ibotpeaches.github.io/Apktool/install/\">下载地址</a>内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.</p>\n<h3 id=\"2-拆开\"><a href=\"#2-拆开\" class=\"headerlink\" title=\"2. 拆开\"></a>2. 拆开</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d com.hello.apk</span><br></pre></td></tr></table></figure>\n\n<p>成功后会在当前目录下生成一个和包同名的目录.</p>\n<h3 id=\"3-修改AndroidManifest-xml\"><a href=\"#3-修改AndroidManifest-xml\" class=\"headerlink\" title=\"3. 修改AndroidManifest.xml\"></a>3. 修改AndroidManifest.xml</h3><p>找到applicaion, 在属性中修改android:debuggable=”true”, 如果没有这个属性手动添加就可以了.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">applicaion</span> <span class=\"attr\">android:debuggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4. 打包\"></a>4. 打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b com.hello.apk/</span><br></pre></td></tr></table></figure>\n\n<p>成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.</p>\n<h3 id=\"5-生成一个keystore\"><a href=\"#5-生成一个keystore\" class=\"headerlink\" title=\"5. 生成一个keystore\"></a>5. 生成一个keystore</h3><p>如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.</p>\n<h3 id=\"6-重新签名\"><a href=\"#6-重新签名\" class=\"headerlink\" title=\"6. 重新签名\"></a>6. 重新签名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 签名者</span><br><span class=\"line\">    X.509, CN&#x3D;..., OU&#x3D;..., O&#x3D;..., L&#x3D;..., ST&#x3D;..., C&#x3D;...</span><br><span class=\"line\">    [可信证书]</span><br><span class=\"line\"></span><br><span class=\"line\">jar 已签名。</span><br><span class=\"line\"></span><br><span class=\"line\">警告:</span><br><span class=\"line\">签名者证书为自签名证书。</span><br></pre></td></tr></table></figure>\n\n<p>至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.</p>\n<hr>\n<h1 id=\"使用AXMLEditor修改AndroidManifest\"><a href=\"#使用AXMLEditor修改AndroidManifest\" class=\"headerlink\" title=\"使用AXMLEditor修改AndroidManifest\"></a>使用AXMLEditor修改AndroidManifest</h1><p>但是某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.</p>\n<h3 id=\"1-装个AXMLEditor先\"><a href=\"#1-装个AXMLEditor先\" class=\"headerlink\" title=\"1. 装个AXMLEditor先\"></a>1. 装个AXMLEditor先</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fourbrother/AXMLEditor.git</span><br></pre></td></tr></table></figure>\n\n<p>啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.</p>\n<h3 id=\"2-解压-amp-修改\"><a href=\"#2-解压-amp-修改\" class=\"headerlink\" title=\"2. 解压 &amp; 修改\"></a>2. 解压 &amp; 修改</h3><p>首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -n -d com.hello com.hello.apk</span><br></pre></td></tr></table></figure>\n\n<p>可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml</span><br></pre></td></tr></table></figure>\n\n<p>这里顺带提一下, 看工具源码中<a href=\"https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151\">这个位置</a>对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.</p>\n<p>最后用输出的文件覆盖原本的输入文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-压缩-amp-二次签名\"><a href=\"#3-压缩-amp-二次签名\" class=\"headerlink\" title=\"3. 压缩 &amp; 二次签名\"></a>3. 压缩 &amp; 二次签名</h3><p>这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.</p>\n<p><strong>重要</strong>: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.</p>\n<p>这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd com.hello/</span><br><span class=\"line\">rm -rf META-INF</span><br><span class=\"line\">zip -r ../com.hello_new.apk ./</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>然后是同样的签名过程, 创建keystore请去上面的内容找:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.</p>\n<p><font color=\"#EEE\">撒, 开始快乐的截帧吧. </font></p>\n<hr>\n<h3 id=\"参考-amp-感谢\"><a href=\"#参考-amp-感谢\" class=\"headerlink\" title=\"参考&amp;感谢\"></a>参考&amp;感谢</h3><p><a href=\"https://blog.csdn.net/wirelessqa/article/details/8997168\">【Android测试工具】03. ApkTool在Mac上的安装和使用</a></p>\n<p><a href=\"https://blog.csdn.net/zlh313_01/article/details/82424664\">关于keystore的简单介绍</a></p>\n<p><a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">Android 8.0 以上开启全局可调式</a></p>\n<p><a href=\"http://www.wjdiankong.cn/archives/1036\">Android中利用AXMLEditor工具不进行反编译就篡改apk文件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"尝试改AndroidManifest并添加Debuggable\"><a href=\"#尝试改AndroidManifest并添加Debuggable\" class=\"headerlink\" title=\"尝试改AndroidManifest并添加Debuggable\"></a>尝试改AndroidManifest并添加Debuggable</h1><p>最近想玩下RenderDoc, 用Mac版的软件自动patch debuggable时不知为何失败了, 于是想问强哥要个debug包, 未遂. 强哥表示我可以自力更生, 倒也没错就是了(悲). 思路大致有这么三个:</p>\n<ul>\n<li><p>可以通过反编译再回编译的方式修改AndroidManifest.xml</p>\n</li>\n<li><p>或者用AXMLEditor这个工具直接修改apk中的二进制AndroidManifest.xml</p>\n</li>\n<li><p>再或者直接上Magisk, 开启全局可调式.</p>\n</li>\n</ul>\n<p>第三种方法由于咱不太懂搞机, 搞不定手头这个红米Note7Pro, 所以单留一个<a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">参考链接</a>, 暂且搁置. 这里在Mac上尝试下前两个方法.</p>\n<p><font color=\"#EEE\">本文中涉及的内容比较简单, 没有拆dex, 没有看java源码, 我也就是拆开包来加了两行垃圾, 又给他打包起来了. 水得很.</font></p>\n<hr>\n<h1 id=\"反编译-回编译\"><a href=\"#反编译-回编译\" class=\"headerlink\" title=\"反编译+回编译\"></a>反编译+回编译</h1><p><strong>注意</strong>: 这个方法前提是程序没有加固, 加固了的先去脱个壳先.</p>\n<h3 id=\"1-装个apktool先\"><a href=\"#1-装个apktool先\" class=\"headerlink\" title=\"1. 装个apktool先\"></a>1. 装个apktool先</h3><p><a href=\"https://ibotpeaches.github.io/Apktool/install/\">下载地址</a>内包含了Mac的安装步骤, 也就是拷贝到bin下改成可执行, 这里就不提了.</p>\n<h3 id=\"2-拆开\"><a href=\"#2-拆开\" class=\"headerlink\" title=\"2. 拆开\"></a>2. 拆开</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool d com.hello.apk</span><br></pre></td></tr></table></figure>\n\n<p>成功后会在当前目录下生成一个和包同名的目录.</p>\n<h3 id=\"3-修改AndroidManifest-xml\"><a href=\"#3-修改AndroidManifest-xml\" class=\"headerlink\" title=\"3. 修改AndroidManifest.xml\"></a>3. 修改AndroidManifest.xml</h3><p>找到applicaion, 在属性中修改android:debuggable=”true”, 如果没有这个属性手动添加就可以了.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">applicaion</span> <span class=\"attr\">android:debuggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-打包\"><a href=\"#4-打包\" class=\"headerlink\" title=\"4. 打包\"></a>4. 打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b com.hello.apk/</span><br></pre></td></tr></table></figure>\n\n<p>成功后会在目标目录下生成dist目录, 其中就有我们需要的apk.</p>\n<h3 id=\"5-生成一个keystore\"><a href=\"#5-生成一个keystore\" class=\"headerlink\" title=\"5. 生成一个keystore\"></a>5. 生成一个keystore</h3><p>如果有现成的那这一步可以跳过, 注意-keystore的参数和-alias的参数一定要一致, 不然会找不到有效密钥(其实就是自签名证书啦, 搞一个正经的证书太麻烦).</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -keystore test.keystore -keyalg RSA -validity 10000 -alias test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>过程中会需要输入各种东西, 记住最开始自己输入的那个密码就可以了.</p>\n<h3 id=\"6-重新签名\"><a href=\"#6-重新签名\" class=\"headerlink\" title=\"6. 重新签名\"></a>6. 重新签名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello.apk test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>过程中会要上一步生成keystore时的密码, 大致当看到这样的输出时就成功了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; 签名者</span><br><span class=\"line\">    X.509, CN&#x3D;..., OU&#x3D;..., O&#x3D;..., L&#x3D;..., ST&#x3D;..., C&#x3D;...</span><br><span class=\"line\">    [可信证书]</span><br><span class=\"line\"></span><br><span class=\"line\">jar 已签名。</span><br><span class=\"line\"></span><br><span class=\"line\">警告:</span><br><span class=\"line\">签名者证书为自签名证书。</span><br></pre></td></tr></table></figure>\n\n<p>至此, 这个包已经可以拿来用了, 只是签名发生了变化, 和签名挂钩的各种验证就过不了了, 但是截个帧绰绰有余.</p>\n<hr>\n<h1 id=\"使用AXMLEditor修改AndroidManifest\"><a href=\"#使用AXMLEditor修改AndroidManifest\" class=\"headerlink\" title=\"使用AXMLEditor修改AndroidManifest\"></a>使用AXMLEditor修改AndroidManifest</h1><p>但是某些apk反编译破解后无法成功回编译, 于是有了这样一个工具, 可以直接修改二进制文件, 无需繁琐的反编译、回编译过程, 厉害得很.</p>\n<h3 id=\"1-装个AXMLEditor先\"><a href=\"#1-装个AXMLEditor先\" class=\"headerlink\" title=\"1. 装个AXMLEditor先\"></a>1. 装个AXMLEditor先</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:fourbrother/AXMLEditor.git</span><br></pre></td></tr></table></figure>\n\n<p>啊, 实际上这个git仓库的readme上已经写了如何操作了, 下面只需要踩着脚印走一遍就可以了.</p>\n<h3 id=\"2-解压-amp-修改\"><a href=\"#2-解压-amp-修改\" class=\"headerlink\" title=\"2. 解压 &amp; 修改\"></a>2. 解压 &amp; 修改</h3><p>首先把apk的内容unzip出来, 我这里直接用了unzip, 导致文件全都出现在当前目录了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip -n -d com.hello com.hello.apk</span><br></pre></td></tr></table></figure>\n\n<p>可以看到AndroidManifest.xml是个二进制文件, 内容无法理解. 尝试使用AXMLEditor对其进行修改.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar AXMLEditor/AXMLEditor.jar -attr -m application 标签唯一标识 debuggable true com.hello/AndroidManifest.xml com.hello/AndroidManifest_out.xml</span><br></pre></td></tr></table></figure>\n\n<p>这里顺带提一下, 看工具源码中<a href=\"https://github.com/fourbrother/AXMLEditor/blob/master/src/cn/wjdiankong/main/XmlEditor.java#L151\">这个位置</a>对manifest和application标签跳过了标签唯一标识的判断, 所以上面那个位置写啥都行, 甚至不用改.</p>\n<p>最后用输出的文件覆盖原本的输入文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv com.hello/AndroidManifest_out.xml com.hello/AndroidManifest.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-压缩-amp-二次签名\"><a href=\"#3-压缩-amp-二次签名\" class=\"headerlink\" title=\"3. 压缩 &amp; 二次签名\"></a>3. 压缩 &amp; 二次签名</h3><p>这样一来就成功在application上添加了debuggable=true属性了, 需要重新把文件打包起来.</p>\n<p><strong>重要</strong>: 因为需要二次签名, 所以要先删掉META-INF, 否则后面jarsigner会出问题.</p>\n<p>这里给它原汁原味地还原一下, 注意不要把文件夹给打包进去了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd com.hello/</span><br><span class=\"line\">rm -rf META-INF</span><br><span class=\"line\">zip -r ../com.hello_new.apk ./</span><br><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n<p>然后是同样的签名过程, 创建keystore请去上面的内容找:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore test.keystore -signedjar result.apk com.hello_new.apk test.keystore</span><br></pre></td></tr></table></figure>\n\n<p>到这里就算搞定了, 这个result.apk就已经是debuggable的了. 可以尝试下adb install, 如果签名有问题的话会安装失败的.</p>\n<p><font color=\"#EEE\">撒, 开始快乐的截帧吧. </font></p>\n<hr>\n<h3 id=\"参考-amp-感谢\"><a href=\"#参考-amp-感谢\" class=\"headerlink\" title=\"参考&amp;感谢\"></a>参考&amp;感谢</h3><p><a href=\"https://blog.csdn.net/wirelessqa/article/details/8997168\">【Android测试工具】03. ApkTool在Mac上的安装和使用</a></p>\n<p><a href=\"https://blog.csdn.net/zlh313_01/article/details/82424664\">关于keystore的简单介绍</a></p>\n<p><a href=\"https://blog.csdn.net/yhsnihao/article/details/106760666\">Android 8.0 以上开启全局可调式</a></p>\n<p><a href=\"http://www.wjdiankong.cn/archives/1036\">Android中利用AXMLEditor工具不进行反编译就篡改apk文件</a></p>\n"},{"title":"Hello, 博客!","_content":"\n# 天气不错, 摸了\n\n今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.\n\n考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.\n\n但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.\n\n","source":"_posts/hello.md","raw":"---\ntitle: Hello, 博客!\n---\n\n# 天气不错, 摸了\n\n今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.\n\n考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.\n\n但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.\n\n","slug":"hello","published":1,"date":"2020-11-04T02:11:20.112Z","updated":"2020-11-04T02:11:20.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhyinp8b000257cm0fz82dpp","content":"<h1 id=\"天气不错-摸了\"><a href=\"#天气不错-摸了\" class=\"headerlink\" title=\"天气不错, 摸了\"></a>天气不错, 摸了</h1><p>今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.</p>\n<p>考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.</p>\n<p>但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"天气不错-摸了\"><a href=\"#天气不错-摸了\" class=\"headerlink\" title=\"天气不错, 摸了\"></a>天气不错, 摸了</h1><p>今天解决了一个比较蛋疼的内存泄漏问题, 心情不错. 在逛知乎的时候无意间发现一个长得不错的博客, 下面赫然写着“Powered by Hexo theme Archer“, 心想我差不多也该搞一个博客了, 于是一顿饭的功夫, 具有了这个页面.</p>\n<p>考虑到我没有靠谱的服务器和域名之类的资源, 我决定将这个页面放到github page上去, 但是下一次更新就说不定是什么时候了. 希望好起来.</p>\n<p>但是这个博客系统的缺陷在于不提供编辑器, 这让我感到十分疑惑, 并且不得不打开文本编辑器写markdown. 之前看过一个很强大的编辑器prosemirror, 有机会的话之后可以用这个编辑器写一个页面来发布文章, 好像还不错.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}